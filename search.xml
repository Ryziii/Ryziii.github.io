<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>interview Java底层：JVM、GC</title>
      <link href="/post/c0e4061e.html"/>
      <url>/post/c0e4061e.html</url>
      
        <content type="html"><![CDATA[<h1 id="引子————谈到Java你会想到什么"><a href="#引子————谈到Java你会想到什么" class="headerlink" title="引子————谈到Java你会想到什么"></a>引子————谈到Java你会想到什么</h1><ol><li>平台无关性，一次编译处处运行；</li><li>GC(Garbage Collection)垃圾回收机制；</li><li>语言特性：范型、反射、Lambda表达式；</li><li>面向对象：封装、继承、多态；</li><li>类库：集合类、并发类、网络类、IO类；</li><li>异常处理；</li></ol><h2 id="Java的平台无关性"><a href="#Java的平台无关性" class="headerlink" title="Java的平台无关性"></a>Java的平台无关性</h2><p>Java源代码被编译为字节码，由不同平台的JVM进行解析，Java源代码在不同平台上不需要重新编译，JVM在执行字节码时会自动将其转化为能在该平台上运行的机器指令。</p><h3 id="字节码：-为什么JVM要先将源码文件编译为字节码不直接将源码文件解析成机器码去执行"><a href="#字节码：-为什么JVM要先将源码文件编译为字节码不直接将源码文件解析成机器码去执行" class="headerlink" title="字节码： 为什么JVM要先将源码文件编译为字节码不直接将源码文件解析成机器码去执行"></a>字节码： 为什么JVM要先将源码文件编译为字节码不直接将源码文件解析成机器码去执行</h3><ol><li>字节码是中间文件，从源代码到字节码过程中有许多校验检查工作，如果直接由JVM执行Java代码将在这一步浪费很多时间。</li><li>其他语言也可以转化成字节码由JVM执行。</li></ol><h2 id="JVM如何加载-class文件"><a href="#JVM如何加载-class文件" class="headerlink" title="JVM如何加载.class文件"></a>JVM如何加载.class文件</h2><p><img src="https://i.imgur.com/FfHnpTj.png" alt="FfHnpTj"></p><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><p>Java反射是在运行状态中，对任意一个类都能知道这个类的所有属性和方法；对任意一个对象，都能调用这个它的任意方法和属性；这种能够动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p><p>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.ryz.javabasic.reflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class ReflectSample &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        Class rc = Class.forName(&quot;com.ryz.javabasic.reflect.Robot&quot;);</span><br><span class="line">        Robot r = (Robot)rc.getDeclaredConstructor().newInstance();</span><br><span class="line">        System.out.println(&quot;Class name is &quot; + rc.getName());</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * getDeclaredMethod可以获取类中包括私有的所有方法，但不能获取继承的</span><br><span class="line">         */</span><br><span class="line">        Method getHello = rc.getDeclaredMethod(&quot;throwHello&quot;, String.class);</span><br><span class="line">        //私有方法需要设置Accessible</span><br><span class="line">        getHello.setAccessible(true);</span><br><span class="line">        Object str = (String) getHello.invoke(r,&quot;test&quot;);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * getMethod不可以获取私有方法，但是可以获取继承的方法</span><br><span class="line">         */</span><br><span class="line">        Method sayHi = rc.getMethod(&quot;sayHi&quot;, String.class);</span><br><span class="line">        sayHi.invoke(r,&quot;welcome&quot;);</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * 类中变量的获取与设置</span><br><span class="line">         */</span><br><span class="line">        Field f = rc.getDeclaredField(&quot;name&quot;);</span><br><span class="line">        f.setAccessible(true);</span><br><span class="line">        f.set(r,&quot;小明&quot;);</span><br><span class="line">        sayHi.invoke(r,&quot;welcome&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="为什么要用到反射"><a href="#为什么要用到反射" class="headerlink" title="为什么要用到反射"></a>为什么要用到反射</h3><ol><li>提高程序的灵活性<br> 比如写JDBC的时候，使用配置文件获取配置加载驱动，就是用过反射加载。</li><li>屏蔽细节，方便实用<br> 使用Spring的时候用XML注入就用到反射机制</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> interview </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interview 笔记备份</title>
      <link href="/post/38e3a3e6.html"/>
      <url>/post/38e3a3e6.html</url>
      
        <content type="html"><![CDATA[<h4 id="9-接口和抽象类有什么不同？"><a href="#9-接口和抽象类有什么不同？" class="headerlink" title="9.接口和抽象类有什么不同？"></a>9.接口和抽象类有什么不同？</h4><p>Java同时提供和支持抽象类和接口，它们的实现有一些共同的特点，也有如下不同：</p><ul><li>接口中所有的方法默认都是抽象的，而抽象类可以同时包含抽象和非抽象的方法。</li><li>一个类可以实现多个接口，但它只能继承一个抽象类。</li><li>一个类要实现某个接口，必须实现这个接口声明的所有方法。而一个类不需要实现抽象父类中声明的所有方法，不过，这时候这个类也必须声明为抽象类。</li><li>抽象类可以实现接口，而且不需要实现接口中的方法。</li><li>接口中声明的变量默认是final的，而抽象类可以包含非final的变量。</li><li>接口中的成员默认是public的，而抽象类的成员可以是private，protected，或public的。</li><li>接口是绝对抽象的，不可实例化，抽象类也不可以实例化，但可以在main方法中触发实例化（注：通过匿名类实现）。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interview Shell指令</title>
      <link href="/post/a1bbe4a9.html"/>
      <url>/post/a1bbe4a9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux体系结构"><a href="#Linux体系结构" class="headerlink" title="Linux体系结构"></a>Linux体系结构</h1><p>Linux体系结构主要分为用户态（用户上层活动）和内核态</p><p>内核：本质上是一段管理计算机硬件设备的程序<br>系统调用：内核的访问接口<br>公共函数库：是对系统调用的封装，方便程序使用<br>shell：是命令解释器，功能强大，可编程</p><h1 id="Linux指令"><a href="#Linux指令" class="headerlink" title="Linux指令"></a>Linux指令</h1><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>find / -name “**”</p><p>-iname 不区分大小写</p><h2 id="grep-与-管道操作符"><a href="#grep-与-管道操作符" class="headerlink" title="grep 与 管道操作符 |"></a>grep 与 管道操作符 |</h2><p><img src="https://i.imgur.com/poBR68p.jpg" alt=""></p><p>管道操作符可以连接各个指令，管道操作符左边的指令输出是右边指令的输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 包含test[正则]的文段</span><br><span class="line">grep -o &apos;test[正则]&apos; </span><br><span class="line">#</span><br><span class="line">//不包含test[正则]的文段</span><br><span class="line">grep -v &apos;test[正则]&apos;</span><br></pre></td></tr></table></figure><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk是对文件分割查找的命令，默认的分隔符是空格，可以使用<code>-F &quot;,&quot;</code>来改变分隔符<br><img src="https://i.imgur.com/86MMlWu.png" alt="86MMlWu"></p><p>添加表头的命令为NR<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &apos;($1==&quot;test1&quot; &amp;&amp; $2==&quot;test31&quot;) || NR==1 &#123;print $0&#125;&apos; netstat.txt</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/nwgWIS3.png" alt="nwgWIS3"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &apos;arr[$1]++&#125;END&#123;for(i in arr)print i &quot;\t&quot; arr[i]&#125;</span><br></pre></td></tr></table></figure><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>sed(stream editor) 流编辑器，常用于字符串替换、删除、修改</p><p><img src="https://i.imgur.com/HhQbhsP.png" alt="HhQbhsP"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;s/^Str/String/&apos; replace.txt     替换以Str开头的字符串为String</span><br><span class="line">sed -i &apos;s/\.$/\;/&apos; replace.txt          替换以&apos;.&apos;为结尾的字符串为&apos;;&apos;</span><br><span class="line">sed -i &apos;s/Jack/me/g&apos; replace.txt        全局替换&apos;Jack&apos;为&apos;me&apos;</span><br><span class="line"></span><br><span class="line">sed -i &apos;/Integer/d&apos; replace.txt         删除Integer所在的行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interview Redis</title>
      <link href="/post/912e298.html"/>
      <url>/post/912e298.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><h3 id="为什么Redis这么快"><a href="#为什么Redis这么快" class="headerlink" title="为什么Redis这么快"></a>为什么Redis这么快</h3><ul><li>完全基于内存，绝大部分请求是内存操作，执行效率高</li><li>数据结构简单，对数据操作也简单</li><li>采用单线程，单线程也能处理高并发请求，想多核也可以启动多实例</li><li>采用多路I/O复用，非阻塞I/O</li></ul><h3 id="Redis提供的数据类型"><a href="#Redis提供的数据类型" class="headerlink" title="Redis提供的数据类型"></a>Redis提供的数据类型</h3><ul><li>String： 基本数据类型</li><li><p>Hash： String元素组成的字典，适合用于存储对象</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// </span><br><span class="line">hmset lilei age 11 name &apos;Lilei&apos;</span><br><span class="line">hset lilei age 12</span><br><span class="line">hget lilei age</span><br></pre></td></tr></table></figure></code></pre></li><li><p>List： 列表，按照String元素插入顺序排序</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lpush mylist aaa</span><br><span class="line">lpush mylist bbb</span><br><span class="line">lrange mylist 0 100</span><br></pre></td></tr></table></figure></code></pre></li><li><p>Set： String元素组成的无序集合，通过哈希表实现，不允许重复</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// set是无序的</span><br><span class="line">sadd myset 11</span><br><span class="line">sadd myset aa</span><br><span class="line">smembers myset</span><br></pre></td></tr></table></figure></code></pre></li><li><p>Sorted Set： 通过分数来为集合中的成员进行从小到大排序</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// zset比set多了一个权重参数</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 3 abc</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 1 ab</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 andn</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 andn</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 andnn</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore myzset 0 10</span><br><span class="line">1) &quot;ab&quot;</span><br><span class="line">2) &quot;andn&quot;</span><br><span class="line">3) &quot;andnn&quot;</span><br><span class="line">4) &quot;abc&quot;</span><br></pre></td></tr></table></figure></code></pre></li></ul><ul><li>用于计数的HyperLogLog</li><li>用于存储地理位置信息的Geo</li></ul><h3 id="从Redis中找到某一固定前缀的Key"><a href="#从Redis中找到某一固定前缀的Key" class="headerlink" title="从Redis中找到某一固定前缀的Key"></a>从Redis中找到某一固定前缀的Key</h3><ul><li>Keys *返回全部，可能会阻塞服务器</li><li>使用SCAN cursor [MATCH pattern] [COUNT count]<ol><li>基于光标的迭代器，需要给予上一次的光标延续之前的迭代过程</li><li>以0作为光标开始的一次新的迭代，知道命令返回光标0完成一次遍历</li><li>不保证每次执行都反悔某个COUNT指令给定数量的元素，支持模糊查询</li><li>一次返回的数量不可控，只能大概率符合count参数</li></ol></li></ul><h2 id="通过Redis实现分布式锁"><a href="#通过Redis实现分布式锁" class="headerlink" title="通过Redis实现分布式锁"></a>通过Redis实现分布式锁</h2><h3 id="分布式锁需要解决的问题"><a href="#分布式锁需要解决的问题" class="headerlink" title="分布式锁需要解决的问题"></a>分布式锁需要解决的问题</h3><ul><li>互斥性：只能有一个客户端获取锁</li><li>安全性：锁只能被持有该锁的客户端删除不能由其他客户端删除</li><li>死锁：需要有机制避免持有此锁的客户端当机而发生的其他客户端也无法获取此锁的</li><li>容错：服务器宕机后客户端依然能获取锁释放锁</li></ul><h3 id="SETNX-key-value"><a href="#SETNX-key-value" class="headerlink" title="SETNX key value"></a>SETNX key value</h3><p>SETNX命令：</p><ul><li>SETNX是原子操作</li><li>时间复杂度为O(1)</li><li><p>返回值：设置成功返回1，设置失败返回0</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get locknx</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; setnx locknx test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; setnx locknx taks</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get locknx</span><br><span class="line">&quot;test&quot;</span><br></pre></td></tr></table></figure></li></ul><p>因为SETNX具有如上特点所以经常被用作分布式锁，但SETNX设置后长期有效，所以可以使用EXPIRE指令</p><h3 id="EXPIRE-key-seconds"><a href="#EXPIRE-key-seconds" class="headerlink" title="EXPIRE key seconds"></a>EXPIRE key seconds</h3><p>EXPIRE指令用于设置key的生存时间，当key过期时(生存时间为0)，将会被自动删除</p><h3 id="SETNX与EXPIRE原子性"><a href="#SETNX与EXPIRE原子性" class="headerlink" title="SETNX与EXPIRE原子性"></a>SETNX与EXPIRE原子性</h3><p>SETNX与EXPIRE指令操作都满足原子性，但被用作分布式锁操作时将两个操作合并在一起就不符合原子性了。使用SET key value [EX seconds] [PX milliseconds] [NX|XX]即可解决。 </p><h3 id="SET-key-value-EX-seconds-PX-milliseconds-NX-XX"><a href="#SET-key-value-EX-seconds-PX-milliseconds-NX-XX" class="headerlink" title="SET key value [EX seconds] [PX milliseconds] [NX|XX]"></a>SET key value [EX seconds] [PX milliseconds] [NX|XX]</h3><ul><li>EX seconds: 设置键的过期时间是秒</li><li>PX milliseconds: 设置键的过期时间是毫秒</li><li>NX: 如果键不存在则设置延迟</li><li>XX: 如果键存在才设置延迟</li><li><p>SET操作成功返回OK，否则返回nil</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set locktarget 123 ex 10 nx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get locktarget</span><br><span class="line">&quot;123&quot;</span><br><span class="line">127.0.0.1:6379&gt; set locktarget 123 ex 10 nx</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure></li></ul><h3 id="怎么避免大量key同时过期"><a href="#怎么避免大量key同时过期" class="headerlink" title="怎么避免大量key同时过期"></a>怎么避免大量key同时过期</h3><p>redis大量key删除key需要耗费资源，大量key同时过期可能造成卡顿，此时新的请求就会向后端数据库获取数据，对数据库造成很大压力。</p><p>解决办法：</p><ol><li>设置key过期时间时，给key加上随机值</li><li>做二级缓存，A1为原始缓存，A2为二级缓存，A1失效时可以访问A2，A1过期时间为短期，A2位长期</li><li>在缓存失效后，通过加锁或队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据库和写缓存，其他线程等待。</li></ol><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>一般的缓存系统都是从通过key查找value，如果找不到value则从数据库查找。某些恶意请求会故意查询许多不存在缓存中的key以此来攻击后端数据库系统。对后端压力很大，这就叫缓存穿透。</p><p>解决办法：</p><ol><li>对查询结果为空的key也进行缓存，设置缓存时间短一点。</li><li>对一些一定不存在的key做过滤，存在一个大的bitmap中，查询时对bitmap进行过滤。</li></ol><h2 id="如何使用Redis实现异步队列"><a href="#如何使用Redis实现异步队列" class="headerlink" title="如何使用Redis实现异步队列"></a>如何使用Redis实现异步队列</h2><h3 id="使用List"><a href="#使用List" class="headerlink" title="使用List"></a>使用List</h3><p>使用List作为队列，RPUSH生产消息，LPOP消费消息</p><p>缺点: 如果队列中的值都被消费完，那将出现没有等待队列中有值就消费的情况<br>解决上述缺点: </p><ol><li>可以在应用层引入Sleep机制去调用LPOP重试</li><li>不想使用Sleep机制，可以使用BLPOP key [key …] timeout (阻塞直到队列有消息或超时)，但因其阻塞的特性使其只能提供一个消费者消费</li><li>使用pub/sub订阅者模式解决上述问题，但该模式的发布是无状态的，无法保证可达，如果客户端下线再重新上线则无法收到之前的消息。</li><li>解决上述问题可以使用专业的消息队列中间件，如Kafka等</li></ol><h2 id="Redis-RDB持久化"><a href="#Redis-RDB持久化" class="headerlink" title="Redis RDB持久化"></a>Redis RDB持久化</h2><h3 id="Redis-RDB持久化方法"><a href="#Redis-RDB持久化方法" class="headerlink" title="Redis RDB持久化方法"></a>Redis RDB持久化方法</h3><p>RDB(Redis DataBase)快照持久化：保存某个时间点的全部数据快照。<br>此功能由redis.conf中的指令控制，在conf中常用到的指令有： </p><ul><li>SAVE: 阻塞redis服务器进程，直到RDB文件被创建完成</li><li>BGSAVE: Fork出一个子进程来创建RDB文件，不阻塞服务器进程</li></ul><h4 id="BGSAVE原理"><a href="#BGSAVE原理" class="headerlink" title="BGSAVE原理"></a>BGSAVE原理</h4><p><img src="https://i.imgur.com/tGWjEg1.png" alt="tGWjEg1"><br>当系统调用fork()时，创建进程实现Copy-on-Write</p><h5 id="什么是Copy-on-Write"><a href="#什么是Copy-on-Write" class="headerlink" title="什么是Copy-on-Write"></a>什么是Copy-on-Write</h5><p>当有多个调用者请求调用相同资源(在内存或者磁盘上的数据储存)，他们会获取相同的指向该资源的指针，直到某个调用者试图修改资源的内容时，系统才会真正的复制一份副本给该调用者，而其他调用者所见的最初的资源仍保持不变。</p><h3 id="自动化触发RDB持久化的方式"><a href="#自动化触发RDB持久化的方式" class="headerlink" title="自动化触发RDB持久化的方式"></a>自动化触发RDB持久化的方式</h3><ol><li>根据redis.conf配置里的SAVE m n定时触发(用的是BGSAVE)</li><li>主从复制时，主节点自动触发</li><li>执行Debug Reload</li><li>执行Shutdown且没有开启AOF持久化</li></ol><p>RDB持久化参考文章 <a href="https://juejin.cn/post/6844903886189395982" target="_blank" rel="noopener">https://juejin.cn/post/6844903886189395982</a></p><h3 id="RDB持久化的缺点"><a href="#RDB持久化的缺点" class="headerlink" title="RDB持久化的缺点"></a>RDB持久化的缺点</h3><ol><li>内存数据的全量同步，数据量大会由于I/O而严重影响性能</li><li>当redis突然挂掉的话，会丢失上次快照到当前时间的数据</li></ol><h2 id="Redis-AOF持久化"><a href="#Redis-AOF持久化" class="headerlink" title="Redis AOF持久化"></a>Redis AOF持久化</h2><h3 id="Reis-AOF是如何做持久化的"><a href="#Reis-AOF是如何做持久化的" class="headerlink" title="Reis AOF是如何做持久化的"></a>Reis AOF是如何做持久化的</h3><p>AOF(Append-Only-File)持久化: 保存写状态</p><ul><li>记录下除了了查询之外的左右变成数据库状态的指令</li><li>以append的形式追加到AOF文件中(增量)</li></ul><h3 id="日志重写结局AOF文件大小不断增大的问题"><a href="#日志重写结局AOF文件大小不断增大的问题" class="headerlink" title="日志重写结局AOF文件大小不断增大的问题"></a>日志重写结局AOF文件大小不断增大的问题</h3><ul><li>因为Reids会不断地往AOF文件中新增执行的命令记录，所以AOF文件在不断增大。极端情况下有可能占满磁盘可用空间</li><li>Redis重启后需要重新执行AOF文件中的命令以此来还原数据集，所以如果AOF文件越大则开启Redis后所需的等待时间就越长。</li></ul><p>为解决此问题，用户可以向Redis发送BGREWRITEAOF命令，这个命令会通过移除AOF文件的冗余来使AOF文件尽可能小。BGREWRITEAOF的原理同RDB持久化BGSAVE相同也需要用到Copy-On-Write特性，BGREWRITEAOF命令原理如下: </p><ol><li>调用fork()，创建一个子进程</li><li>子进程把新的AOF文件写进一个临时文件中，不依赖原来的AOF文件</li><li>主进程持续将新的变动同时写进内存和原来的AOF里</li><li>主进程获取子进程重写AOF的完成信号，往新的AOF同步增量变动</li><li>使用新的AOF文件替换掉旧的AOF文件</li></ol><h3 id="Reids持久化RDB与AOF对比"><a href="#Reids持久化RDB与AOF对比" class="headerlink" title="Reids持久化RDB与AOF对比"></a>Reids持久化RDB与AOF对比</h3><p>RDB优缺点: 本质上是内存备份，RDB的优点在于全量备份文件小恢复快，缺点在于无法保存创建RDB文件之后的增量数据<br>AOF优缺点: 本质上是一份执行日志，优点在于可读性高，适合保存增量数据，数据不易丢失，缺点在于文件体积大，做日志回放恢复时间较长</p><h3 id="RDB-AOF混合持久化方式"><a href="#RDB-AOF混合持久化方式" class="headerlink" title="RDB-AOF混合持久化方式"></a>RDB-AOF混合持久化方式</h3><p>使用RDB做全量持久化，用AOF做增量持久化</p><h2 id="Redis同步机制"><a href="#Redis同步机制" class="headerlink" title="Redis同步机制"></a>Redis同步机制</h2><h3 id="Redis-Pipeline"><a href="#Redis-Pipeline" class="headerlink" title="Redis Pipeline"></a>Redis Pipeline</h3><p>Redis的get操作是阻塞的，使用Pipeline可以批量执行命令，节省多次IO往返的时间。</p><h3 id="流言协议Gossip"><a href="#流言协议Gossip" class="headerlink" title="流言协议Gossip"></a>流言协议Gossip</h3><p>流言协议指的是随机在系统中传播信息，并在一定时间内使得整个系统节点的信息保持一致。</p><ul><li>每个节点都能随即地与对方通信，最终所有节点的状态达成一致。</li><li>种子节点定期随机向其他节点发送节点列表以及需要传播的信息。</li><li>不保证信息一定会传递给所有节点，但是最终会趋于一致。</li></ul><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><p>Redis集群参考<a href="https://juejin.cn/post/6850418113830846471" target="_blank" rel="noopener">此篇文章</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interview 数据库相关</title>
      <link href="/post/df0d4913.html"/>
      <url>/post/df0d4913.html</url>
      
        <content type="html"><![CDATA[<h2 id="关系型数据库基本架构"><a href="#关系型数据库基本架构" class="headerlink" title="关系型数据库基本架构"></a>关系型数据库基本架构</h2><p><img src="https://i.imgur.com/Uq2eYn9.jpg" alt=""></p><h3 id="关系数据库索引所采取的数据结构"><a href="#关系数据库索引所采取的数据结构" class="headerlink" title="关系数据库索引所采取的数据结构"></a>关系数据库索引所采取的数据结构</h3><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B Tree"></a>B Tree</h4><p><img src="https://i.imgur.com/0jVQ0S3.jpg" alt=""></p><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+ Tree"></a>B+ Tree</h4><p><img src="https://i.imgur.com/jqDubwu.jpg" alt=""></p><h4 id="密集索引和稀疏索引"><a href="#密集索引和稀疏索引" class="headerlink" title="密集索引和稀疏索引"></a>密集索引和稀疏索引</h4><p>密集索引：文件中每个搜索码值都对应一个索引值<br>稀疏索引：文件只为索引码的某些值建立索引项 </p><h5 id="为什么要使用索引"><a href="#为什么要使用索引" class="headerlink" title="为什么要使用索引"></a>为什么要使用索引</h5><p>使用索引可以避免全表扫描，可以提升效率</p><h5 id="什么样的信息能成为索引"><a href="#什么样的信息能成为索引" class="headerlink" title="什么样的信息能成为索引"></a>什么样的信息能成为索引</h5><p>唯一键、主键、能将信息区分开的字段</p><h5 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h5><p>主流是B+Tree，还有哈希、bitmap等，MySql不支持bitmap，Inodb和MyISAM不支持哈希</p><h3 id="如何定位并优化慢查询Sql"><a href="#如何定位并优化慢查询Sql" class="headerlink" title="如何定位并优化慢查询Sql"></a>如何定位并优化慢查询Sql</h3><ol><li>根据慢查询日志定位慢查询sql</li><li>使用explain等工具分析sql</li><li>修改sql或者尽量让sql走索引</li></ol><h3 id="联合索引的最左匹配原则"><a href="#联合索引的最左匹配原则" class="headerlink" title="联合索引的最左匹配原则"></a>联合索引的最左匹配原则</h3><h4 id="什么是最左匹配原则"><a href="#什么是最左匹配原则" class="headerlink" title="什么是最左匹配原则"></a>什么是最左匹配原则</h4><p>mysql会一直向右匹配直到遇到范围查询（&gt;、&lt;、between、like）就停止匹配，比如a = 3 and b = 5 and c &gt; 5 and d = 6 如果建立(a,b,c,d)顺序的索引，d是用不到索引的</p><h4 id="联合索引的最左匹配原则成因"><a href="#联合索引的最左匹配原则成因" class="headerlink" title="联合索引的最左匹配原则成因"></a>联合索引的最左匹配原则成因</h4><p>最左前缀匹配成因：mysql 是创建复合索引的规则是根据索引最左边的字段进行排序，在第一个字段排序的基础上再进行第二个字段排序，类似于order by col1，col2… 所以第一个字段是绝对有序的 第二个字段就是无序的了，所以mysql 强调最左前缀匹配</p><h2 id="锁模块"><a href="#锁模块" class="headerlink" title="锁模块"></a>锁模块</h2><h3 id="写锁和读锁"><a href="#写锁和读锁" class="headerlink" title="写锁和读锁"></a>写锁和读锁</h3><p>读锁是共享锁，读锁上时不影响其他select读语句<br>写锁是排他锁，写锁上时其他写入语句别block住</p><blockquote><p>innodb默认支持行级锁</p></blockquote><h2 id="数据库事务的四大特性"><a href="#数据库事务的四大特性" class="headerlink" title="数据库事务的四大特性"></a>数据库事务的四大特性</h2><p>ACID</p><ul><li>原子性（Atomic）</li><li>一致性（Consistency）</li><li>隔离性（Isolation）</li><li>持久性（Durability）</li></ul><h2 id="Mysql复杂语句"><a href="#Mysql复杂语句" class="headerlink" title="Mysql复杂语句"></a>Mysql复杂语句</h2><p>GROUP BY</p><ul><li>满足’SELECT子句中的列名必须为分组列或列函数’</li><li>列函数对group by定义的每个组各返回一个结果 </li></ul><p>HAVING</p><ul><li>having通常与group by一起使用</li><li>where是用来过滤行，having用来过滤组</li><li>同一个sql语句中出现的顺序是：WHERE &gt; GROUP BY &gt; HAVING</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interview HTTP协议相关</title>
      <link href="/post/28a3ef0.html"/>
      <url>/post/28a3ef0.html</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="HTTP协议特点"><a href="#HTTP协议特点" class="headerlink" title="HTTP协议特点"></a>HTTP协议特点</h4><ul><li>支持客户/服务器模式：浏览器向服务器请求</li><li>简单快速：get、post…</li><li>灵活：允许传输任意类型数据</li><li>无连接：请求结束后断开连接</li><li>无状态：不保留状态，之后的事务不知道之前的事</li></ul><h4 id="HTTP协议请求-响应步骤"><a href="#HTTP协议请求-响应步骤" class="headerlink" title="HTTP协议请求/响应步骤"></a>HTTP协议请求/响应步骤</h4><ol><li>客户端连接到Web服务器</li><li>客户端发送HTTP请求</li><li>服务器接受请求并返回HTTP响应</li><li>关闭TCP连接</li><li>客户端解析HTML</li></ol><h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><ol><li>1XX：提示信息</li><li>2XX：成功</li><li>3XX：重定向</li><li>4XX：客户端错误</li><li>5XX：服务端错误 </li></ol><h3 id="Cookie与Session"><a href="#Cookie与Session" class="headerlink" title="Cookie与Session"></a>Cookie与Session</h3><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>服务器发给客户的信息，客户端以文本的形式保存在本地<br>Cookie的设置过程：<br><img src="https://i.imgur.com/2A4VivD.jpg" alt=""></p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>保存在服务器上<br>Session实现方式：<br><img src="https://i.imgur.com/SVAxPO9.jpg" alt=""></p><ol><li>使用Cookie实现：在Cookie中写入SessionID，这样在服务端和客户端交互时就带有SessionID</li><li>使用URL回写：服务器发给客户端页面中所有连接都带有SessionID，这样在浏览器点击任何一个URL时都会带回SessionID</li></ol><h4 id="Cookie与Session的区别"><a href="#Cookie与Session的区别" class="headerlink" title="Cookie与Session的区别"></a>Cookie与Session的区别</h4><ul><li>Cookie存储在客户端浏览器上，Session存储在服务器上</li><li>Session比Cookie安全（因为Cookie存放在本地，可以被人本地分析）</li><li>Session因为存放在服务器上所以会影响服务器性能，为减轻服务器开销应当使用Cookie</li></ul><h3 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h3><ul><li>HTTP报文层面：GET将请求信息放入URL，POST将请求信息放入报文体(bodyw)内（GET请求信息长度理论上不受限制，但实际上受浏览器客户端的限制）</li><li>数据库层面：GET符合幂等性和安全性，POST不符合（因为GET是做查询，不影响数据库）</li><li>其他层面：GET可以被缓存、被存储，POST不行</li></ul><h3 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h3><p>HTTPS为更安全的HTTP，比HTTP多了SSL</p><h4 id="SSL是什么"><a href="#SSL是什么" class="headerlink" title="SSL是什么"></a>SSL是什么</h4><p><img src="https://i.imgur.com/2d8R8ou.jpg" alt=""></p><h4 id="几类常见的加密方式"><a href="#几类常见的加密方式" class="headerlink" title="几类常见的加密方式"></a>几类常见的加密方式</h4><ul><li>对称加密：加解密使用同一个密钥</li><li>非对称加密：加解密使用的密钥都不用</li><li>哈希算法：将任意长度信息转换为固定长度的值，算法不可逆</li><li>数字签名：将签名加密附在信息中</li></ul><h4 id="HTTPS传输流程"><a href="#HTTPS传输流程" class="headerlink" title="HTTPS传输流程"></a>HTTPS传输流程</h4><ol><li>客户端将支持的加密算法信息发送给服务器</li><li>服务器选择一套客户端支持的加密算法，以证书的方式回发客户端</li><li>客户端验证证书的合法性，并结合证书公钥加密信息发送给服务器</li><li>服务器使用私钥揭秘信息，验证哈希，加密响应消息回发给客户端</li><li>客户端解密响应消息，并对消息进行验真，之后进行加密交互数据</li></ol><h4 id="HTTPS和HTTP区别"><a href="#HTTPS和HTTP区别" class="headerlink" title="HTTPS和HTTP区别"></a>HTTPS和HTTP区别</h4><ul><li>HTTPS需要到CA申请证书</li><li>HTTPS是密文传输，HTTP是明文传输（因为HTTPS经过SSL加密）</li><li>HTTPS使用的是443端口，HTTP使用80</li><li>HTTPS=HTTP+加密+认证+完整性保护</li></ul><h4 id="HTTPS真的安全吗"><a href="#HTTPS真的安全吗" class="headerlink" title="HTTPS真的安全吗"></a>HTTPS真的安全吗</h4><p>在浏览器上输入url时如果不输入https，则浏览器默认填充http，一般网站使用http跳转https，这时就容易受到攻击，应该使用HSTS标准优化</p><h5 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h5><p>HSTS（HTTP Strict Transport Security）是严格传输安全的缩写。<br>如果一个网站生命HSTS策略，则浏览器必须拒绝所有HTTP连接并阻止用户接受不安全的SSL证书。</p><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><h4 id="Socket通信过程"><a href="#Socket通信过程" class="headerlink" title="Socket通信过程"></a>Socket通信过程</h4><p><img src="https://i.imgur.com/vFPDreT.jpg" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interview UDP相关</title>
      <link href="/post/27e25b32.html"/>
      <url>/post/27e25b32.html</url>
      
        <content type="html"><![CDATA[<h2 id="UDP协议的特点"><a href="#UDP协议的特点" class="headerlink" title="UDP协议的特点"></a>UDP协议的特点</h2><ul><li>UDP面向非连接</li><li>UDP不维护连接状态，支持同事向多个客户端传输相同的消息</li><li>数据包头只有8个字节，额外开销较小</li><li>吞吐量只受限于数据生成速率、传输速率以及机器性能</li><li>UDP不保证可靠交付</li><li>不对应用程序提交豹纹信息进行拆分或合并</li></ul><h3 id="由上结论得出TCP和UDP"><a href="#由上结论得出TCP和UDP" class="headerlink" title="由上结论得出TCP和UDP"></a>由上结论得出TCP和UDP</h3><ul><li>面向连接vs无连接：UDP常用于广播，多播发布，而TCP是面向连接的</li><li>可靠性：UDP无可靠性保证，TCP有握手重出传机制</li><li>有序性：TCP通过序号保证传输数据的有序性，UDP无序</li><li>速度：UDP速度更快，适合视频，游戏</li><li>量级：TCP20字节 UDP8字节</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interview TCP滑动窗口</title>
      <link href="/post/75d57196.html"/>
      <url>/post/75d57196.html</url>
      
        <content type="html"><![CDATA[<h2 id="RTT和RTO"><a href="#RTT和RTO" class="headerlink" title="RTT和RTO"></a>RTT和RTO</h2><ol><li>RTT是发送一个数据包到收到ACK所花费的时间；</li><li>RTO是重传时间间隔，当没有收到回应是，一定时间间隔后会重传数据包，RTO是根据RTT计算出的。</li></ol><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><img src="https://i.imgur.com/xiCrFsF.png" alt=""><br><img src="https://i.imgur.com/sLuPbHQ.png" alt=""><br><img src="https://i.imgur.com/H52iLrk.png" alt=""><br>滑动窗口用于做流量控制和乱序重排<br>TCP发送方和接收方都维护着一个数据缓存区，<br>发送方缓存区有如下四种状态：</p><ol><li>已发送已收到ACK</li><li>已发送未收到ACK</li><li>未发送可发送</li><li>不可发送</li></ol><p>接收方缓存区有如下三种状态：</p><ol><li>已接收并已回复ACK</li><li>允许接收</li><li>不允许接收</li></ol><p><a href="https://www.cnblogs.com/lingyejun/p/7158028.html" target="_blank" rel="noopener">可参考1</a><br><a href="https://my.oschina.net/funcy/blog/3006133" target="_blank" rel="noopener">可参考2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interview TCP四次挥手</title>
      <link href="/post/beaf26b1.html"/>
      <url>/post/beaf26b1.html</url>
      
        <content type="html"><![CDATA[<h2 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h2><p><img src="https://ryziii.github.io/post-images/1570713886846.jpeg" alt="">[interview] TCP断开连接需要进行“四次挥手”</p><ol><li>Client向Server发送带有FIN包(seq = u)的包，用于关闭Client到Server的数据连接，并进入FIN_WAIT_1状态；</li><li>Server接收到FIN包后向Client发送一个ACK包(ack=u+1,seq=v),并进入CLOSE_WAIT状态,Client收到后进入FIN_WAIT_2;</li><li>待Server发送完数据后，再向Client发送一个FIN+ACK包(seq=w,ack=u+1)，用于关闭Server到Client的数据传送，并进入LAST_ACK状态；</li><li>Client收到FIN报文后进入TIMEWAIT状态，接着向Server发送一个ACK包(ack=w+1,seq=u+1)，Server进入CLOSE状态。</li></ol><blockquote><p>注：Client进入TIMEWAIT状态后2MSL后就进入CLOSE状态，Linux中MSL一般为30s。MSL是为了让Server有足够的时间收到最后一个ACK包。</p></blockquote><h2 id="为什么需要四次挥手"><a href="#为什么需要四次挥手" class="headerlink" title="为什么需要四次挥手"></a>为什么需要四次挥手</h2><p>因为TCP连接是全双工的，所以Client和Server都需要FIN报文和ACK报文。</p><h2 id="服务器出现大量CLISE-WAIT"><a href="#服务器出现大量CLISE-WAIT" class="headerlink" title="服务器出现大量CLISE_WAIT"></a>服务器出现大量CLISE_WAIT</h2><p>因为代码中没有释放资源<br>netstat -n |awk ‘/^tcp/{++S[$NF]}END{for(a in S) print a,S[a]}’</p>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interview 三次握手</title>
      <link href="/post/5cde0e4d.html"/>
      <url>/post/5cde0e4d.html</url>
      
        <content type="html"><![CDATA[<h2 id="三次握手过程"><a href="#三次握手过程" class="headerlink" title="三次握手过程"></a>三次握手过程</h2><p>在TCP/IP协议中，TCP通过三次握手来创建一个可靠的连接。</p><ol><li>第一次握手，发送端向服务器发送SYN包(syn=j)，并进入SYN_SEND状态，等待服务器回应。</li><li>第二次握手，服务器收到发送端发来的SYN包，必须确认发送端的SYN包(ack=j+1)，并发送一个SYN(syn=k),即SYN+ACK包。此时服务器进入SYN_RECIV状态。</li><li>第三次握手，客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此时双方建立连接，进入ESTABLISHED状态，完成三次握手。</li></ol><h2 id="为什么需要三次握手？"><a href="#为什么需要三次握手？" class="headerlink" title="为什么需要三次握手？"></a>为什么需要三次握手？</h2><p>为了初始化Sequence Number，防止后续建立连接后发送数据乱序</p><h2 id="SYN超时隐患"><a href="#SYN超时隐患" class="headerlink" title="SYN超时隐患"></a>SYN超时隐患</h2><p>Server收到Client的SYN，发送SYN-ACK后未收到CLient的ACK确认，Server会不断重试直至超时，Linux默认63s<br>SYN超时会造成Server在时间内才会断开连接，攻击者会让服务器无法处理正常连接请求。Linux会构造一个SYNcookie只有请求者可以回复，防止被恶意进攻</p>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode 104 递归</title>
      <link href="/post/bfd03033.html"/>
      <url>/post/bfd03033.html</url>
      
        <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/</a></p><p>找树有几层,递归即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root==<span class="keyword">null</span>?<span class="number">0</span>:dfs(root,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>) <span class="keyword">return</span> len;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>) <span class="keyword">return</span> dfs(root.left,len+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.left==<span class="keyword">null</span>&amp;&amp;root.right!=<span class="keyword">null</span>) <span class="keyword">return</span> dfs(root.right,len+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> Math.max(dfs(root.left,len+<span class="number">1</span>),dfs(root.right,len+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//看到讨论区有个人一行搞定</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="keyword">null</span> ? <span class="number">0</span> : Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode 107 bfs</title>
      <link href="/post/d299569f.html"/>
      <url>/post/d299569f.html</url>
      
        <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/</a></p><p>从下到上返回每层二叉树的值<br>用bfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(root);</span><br><span class="line">            List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            lists.add(res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> n = queue.size();<span class="comment">//因为是每层的值,所以这里加一个循环</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">                TreeNode a = queue.removeFirst();</span><br><span class="line">                <span class="keyword">if</span> (a.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    res.add(a.left.val);</span><br><span class="line">                    queue.add(a.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    res.add(a.right.val);</span><br><span class="line">                    queue.add(a.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!res.isEmpty()) lists.add(res);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(lists);</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode 394 栈</title>
      <link href="/post/745a84ae.html"/>
      <url>/post/745a84ae.html</url>
      
        <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode-cn.com/problems/decode-string/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/decode-string/</a></p><p>这题做了很久,用的递归的思路去解的,发现很痛苦,调试到最后都不知道自己的思路是什么了,懵懵的,过了以后看别人怎么写的,发现优雅的解法应该是用栈模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'['</span>) &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span>) &#123;</span><br><span class="line">                    num--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                res.append(pinjie(s.substring(i)));</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">'a'</span>&amp;&amp;c&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">                res.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">pinjie</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        StringBuilder ss = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    ss.append(pinjie(s.substring(i)));</span><br><span class="line">                    <span class="keyword">boolean</span> fl = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;s.length();j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(s.charAt(j)==<span class="string">'['</span>&amp;&amp;!fl)&#123;</span><br><span class="line">                            n++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(s.charAt(j)==<span class="string">']'</span>)&#123;</span><br><span class="line">                            n--;fl=<span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (n == <span class="number">0</span>&amp;&amp;fl) &#123;</span><br><span class="line">                            i=j;<span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    num = num*<span class="number">10</span>+(c-<span class="string">'0'</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                    flag=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">']'</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">                    res.append(ss);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'['</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ss.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优雅版</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; strlist = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt; countlist = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        StringBuilder sb  = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;chars.length)&#123;</span><br><span class="line">            <span class="keyword">while</span>(Character.isDigit(chars[i]))&#123;</span><br><span class="line">                sb.append(chars[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!sb.toString().isEmpty())&#123;</span><br><span class="line">                countlist.addLast(Integer.valueOf(sb.toString()));</span><br><span class="line">                sb.delete(<span class="number">0</span>,sb.length());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;chars.length&amp;&amp;Character.isLetter(chars[i]))&#123;</span><br><span class="line">                sb.append(chars[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!sb.toString().isEmpty())&#123;</span><br><span class="line">                strlist.addLast(sb.toString());</span><br><span class="line">                sb.delete(<span class="number">0</span>,sb.length());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;chars.length&amp;&amp;chars[i]==<span class="string">'['</span>)&#123;</span><br><span class="line">                strlist.addLast(<span class="string">"["</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            String str=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;chars.length&amp;&amp;chars[i]==<span class="string">']'</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(!strlist.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="string">"["</span>.equals(strlist.peekLast()))&#123;</span><br><span class="line">                        str = strlist.pollLast()+str;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        strlist.pollLast();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> count = countlist.removeLast();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;count;j++)&#123;</span><br><span class="line">                    sb.append(str);</span><br><span class="line">                &#125;</span><br><span class="line">                strlist.addLast(sb.toString());</span><br><span class="line">                sb.delete(<span class="number">0</span>,sb.length());</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String s1 : strlist) &#123;</span><br><span class="line">            sb.append(s1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode 21 合并链表</title>
      <link href="/post/ce6d2c02.html"/>
      <url>/post/ce6d2c02.html</url>
      
        <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p><p>想了很久逻辑拐不过弯来,发现数据结构还是要去看一下,最后没写错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode li = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode res = li;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>||l2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l1==<span class="keyword">null</span>?l2:l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>||l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1==<span class="keyword">null</span>)&#123;</span><br><span class="line">                res.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">                res = res.next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2==<span class="keyword">null</span>)&#123;</span><br><span class="line">                res.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">                res = res.next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l1.val&gt;=l2.val)&#123;</span><br><span class="line">                res.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">                res = res.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">                res = res.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> li.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//我在发现两个链表不同长时还是一个一个填充,写完后看了眼讨论区,发现两个链表不同长时可以在最后直接填到res.next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode li = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode res = li;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>||l2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l1==<span class="keyword">null</span>?l2:l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>||l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1.val&gt;=l2.val)&#123;</span><br><span class="line">                res.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">                res = res.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">                res = res.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            res.next = l2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.next = l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> li.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode 88</title>
      <link href="/post/1c0f5e68.html"/>
      <url>/post/1c0f5e68.html</url>
      
        <content type="html"><![CDATA[<p>题目链接<a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-sorted-array/</a></p><p>拼装数组,有序的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>,l1=<span class="number">0</span>,l2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1&lt;m||l2&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1&gt;=m)&#123;</span><br><span class="line">                res[len++]=nums2[l2++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2&gt;=n)&#123;</span><br><span class="line">                res[len++]=nums1[l1++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(nums1[l1]==nums2[l2])&#123;</span><br><span class="line">                res[len++]=nums1[l1++];</span><br><span class="line">                res[len++]=nums2[l2++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums1[l1]&gt;nums2[l2])&#123;</span><br><span class="line">                res[len++]=nums2[l2++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums1[l1]&lt;nums2[l2]) &#123;</span><br><span class="line">                res[len++] = nums1[l1++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.length;i++)&#123;</span><br><span class="line">            nums1[i]=res[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写完后看了下讨论区,有的人写的真挺漂亮</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = m-- + n-- - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &gt;= <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[p--] = nums1[m] &gt; nums2[n] ? nums1[m--] : nums2[n--];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[p--] = nums2[n--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode 26</title>
      <link href="/post/1589be5.html"/>
      <url>/post/1589be5.html</url>
      
        <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a></p><p>直接把后面的塞前面就行了,题目说不考虑后面只返回len</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=nums[len])&#123;</span><br><span class="line">                nums[len++]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单回溯 leetcode 100</title>
      <link href="/post/a6ac1cf.html"/>
      <url>/post/a6ac1cf.html</url>
      
        <content type="html"><![CDATA[<p>题目地址:<a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/same-tree/</a></p><p>这道题写了两种方法,第一种方法太蠢了,后来改进用了第二种,其实本质就是让写个equal,我第一种方法竟然选择遍历二叉树存进map里再用map的equal去判断,蠢哭了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历后equal</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String,Object&gt; map2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        getTree(p,map1,<span class="number">1</span>);</span><br><span class="line">        getTree(q,map2,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> map1.equals(map2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTree</span><span class="params">(TreeNode q,Map&lt;String,Object&gt; map,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(q==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">"val"</span>+i,q.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q.left == <span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(<span class="string">"left"</span>+i,<span class="keyword">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">"left"</span>+i,q.left.val);</span><br><span class="line">            getTree(q.left,map,<span class="number">2</span>*i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(<span class="string">"right"</span>+i,<span class="keyword">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">"right"</span>+i,q.right.val);</span><br><span class="line">            getTree(q.right,map,<span class="number">2</span>*i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接回溯</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String,Object&gt; map2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> getTree(p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getTree</span><span class="params">(TreeNode q,TreeNode p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(q==<span class="keyword">null</span> &amp;&amp; p==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(q!=<span class="keyword">null</span>&amp;&amp;p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag3 = q.val == p.val;</span><br><span class="line">            <span class="keyword">boolean</span> flag1 = getTree(q.left,p.left);</span><br><span class="line">            <span class="keyword">boolean</span> flag2 = getTree(q.right,p.right);</span><br><span class="line">            <span class="keyword">if</span>(flag1&amp;&amp; flag2&amp;&amp;flag3)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接回溯方法2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="keyword">null</span> &amp;&amp; p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="keyword">null</span> || p == <span class="keyword">null</span> || q.val != p.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isSameTree(q.left, p.left) &amp;&amp; isSameTree(q.right, p.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单模拟题 leetcode-12</title>
      <link href="/post/83597930.html"/>
      <url>/post/83597930.html</url>
      
        <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode-cn.com/problems/integer-to-roman/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/integer-to-roman/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"M"</span>,<span class="number">1000</span>);</span><br><span class="line">        map.put(<span class="string">"CM"</span>,<span class="number">900</span>);</span><br><span class="line">        map.put(<span class="string">"D"</span>,<span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">"CD"</span>,<span class="number">400</span>);</span><br><span class="line">        map.put(<span class="string">"C"</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">"XC"</span>,<span class="number">90</span>);</span><br><span class="line">        map.put(<span class="string">"L"</span>,<span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">"XL"</span>,<span class="number">40</span>);</span><br><span class="line">        map.put(<span class="string">"X"</span>,<span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">"IX"</span>,<span class="number">9</span>);</span><br><span class="line">        map.put(<span class="string">"V"</span>,<span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">"IV"</span>,<span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">"I"</span>,<span class="number">1</span>);</span><br><span class="line">        StringBuilder sb  =<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">            Iterator it = map.keySet().iterator();</span><br><span class="line">            <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">                String c = (String) it.next();</span><br><span class="line">                <span class="keyword">int</span> va = map.get(c);</span><br><span class="line">                <span class="keyword">if</span>(num&gt;=va)&#123;</span><br><span class="line">                    sb.append(c);</span><br><span class="line">                    num-=va;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单模拟 leetcode-13</title>
      <link href="/post/3a681d24.html"/>
      <url>/post/3a681d24.html</url>
      
        <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/roman-to-integer/</a></p><p>遍历string,只要右边比当前值大就减去当前值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">'I'</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">'V'</span>,<span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">'X'</span>,<span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">'L'</span>,<span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">'C'</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">'D'</span>,<span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">'M'</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            Integer cur = map.get(s.charAt(i));</span><br><span class="line">            Integer nx;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&gt;= s.length())&#123;</span><br><span class="line">                sum+=cur;</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nx = map.get(s.charAt(i+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur&lt;nx)&#123;</span><br><span class="line">                sum-=cur;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum+=cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>全排列简单版-回溯 leetcode.784</title>
      <link href="/post/9e8d94d3.html"/>
      <url>/post/9e8d94d3.html</url>
      
        <content type="html"><![CDATA[<p>题目链接:<a href="https://leetcode-cn.com/problems/letter-case-permutation/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/letter-case-permutation/</a></p><p>题意就是给定字符串输出该字符串所有英文字母的大小写形式<br>回溯全排列即可 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//全排列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCasePermutation</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        huisuo(list,<span class="number">0</span>,S.length(),<span class="keyword">new</span> StringBuilder(),S);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">huisuo</span><span class="params">(List&lt;String&gt; list,<span class="keyword">int</span> len,<span class="keyword">int</span> rellen,StringBuilder sb,String ss)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len == rellen)&#123;</span><br><span class="line">            list.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> c = ss.charAt(len);</span><br><span class="line">        <span class="keyword">if</span>((c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>) || (c &gt;= <span class="string">'A'</span> &amp;&amp; c&lt;= <span class="string">'Z'</span>))&#123;</span><br><span class="line">            huisuo(list,len+<span class="number">1</span>,rellen,sb.append(Character.toUpperCase(c)),ss);</span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">            huisuo(list,len+<span class="number">1</span>,rellen,sb.append(Character.toLowerCase(c)),ss);</span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            huisuo(list,len+<span class="number">1</span>,rellen,sb.append(c),ss);</span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html基础知识记录(持续更新)</title>
      <link href="/post/318304a3.html"/>
      <url>/post/318304a3.html</url>
      
        <content type="html"><![CDATA[<h3 id="u-标签"><a href="#u-标签" class="headerlink" title="u 标签"></a>u 标签</h3><p>u标签表斜体,如:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>111<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><u>111</u></p><h3 id="strong-标签"><a href="#strong-标签" class="headerlink" title="strong 标签"></a>strong 标签</h3><p>b标签为粗体,strong在浏览器上的效果看上去相同,但是strong标签有着重强调的意思,另附一个小知识,盲人朋友们在使用阅读设备时,strong标签会让文字重(zhong)读</p><h3 id="em标签"><a href="#em标签" class="headerlink" title="em标签"></a>em标签</h3><p>em 标签也表强调,在浏览器上效果为斜体</p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL的limit与分页查询</title>
      <link href="/post/cf5eab58.html"/>
      <url>/post/cf5eab58.html</url>
      
        <content type="html"><![CDATA[<h2 id="limit用法"><a href="#limit用法" class="headerlink" title="limit用法"></a>limit用法</h2><p>在mysql中有时需要使用限制查找行数,这在mysql语句中有自带的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tableName LIMIT [offset,] rows|LIMIT rows OFFSET length</span><br><span class="line"></span><br><span class="line">SELECT * FROM table WHERE username = 1 LIMIT 10 OFFSET 5</span><br><span class="line">SELECT * FROM table WHERE username = 1 LIMIT 5,10</span><br></pre></td></tr></table></figure></p><p>LIMIT可以用于返回指定数量的mysql记录,LIMIT接受一个或两个整形参数.如果给了两个参数,第一个参数为<strong><u>偏移量</u></strong>,第二个参数为指定返回记录数.<strong><u>mysql初始记录数行偏移量为0不是1</u></strong></p><p>如果需要检索某一偏移量到记录集结束的所有记录集,可以指定第二个参数为-1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM table LIMIT 5,-1</span><br></pre></td></tr></table></figure></p><h2 id="mysql分页查询性能分析"><a href="#mysql分页查询性能分析" class="headerlink" title="mysql分页查询性能分析"></a>mysql分页查询性能分析</h2><p>基本的mysql分页方式就是<code>SELECT ... FORM ... WHERE ... ORDER BY ... LIMIT ...</code><br>当数据量增大,子页变多,<u>LIMIT语句的偏移量增大时,查询速度会变慢</u><br>有几种方法可以提高查询速度</p><ol><li>通过自查询的方式优化速度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table WHERE id &gt;= </span><br><span class="line">(SELECT id FROM table WHERE username = &apos;11&apos; ORDER BY id LIMIT 10000,1) LIMIT 10</span><br></pre></td></tr></table></figure><ol><li>通过join分页方式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM &apos;table1&apos; AS t1</span><br><span class="line">JOIN (SELECT id FROM &apos;table1&apos; ORDER BY id ASC LIMIT &quot;.($page-1)*$pagesize.&quot;,1) AS t2</span><br><span class="line">WHERE t1.id &lt;= t2.id ORDER BY t1.id ASC LIMIT $pagesize;</span><br></pre></td></tr></table></figure><p>参考链接:<a href="https://segmentfault.com/a/1190000008859706" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008859706</a></p><h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>不使用分页查询直接用limit查询的话大数据量如100w的话mysql性能收到很大影响,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQL代码1：平均用时6.6秒 SELECT * FROM `cdb_posts` ORDER BY pid LIMIT 1000000 , 30</span><br><span class="line"></span><br><span class="line">SQL代码2：平均用时0.6秒 SELECT * FROM `cdb_posts` WHERE pid &gt;= (SELECT pid FROM  </span><br><span class="line">`cdb_posts` ORDER BY pid LIMIT 1000000 , 1) LIMIT 30</span><br></pre></td></tr></table></figure></p><p>因为要取出所有字段内容，第一种需要跨越大量数据块并取出，而第二种基本通过直接根据索引字段定位后，才取出相应内容，效率自然大大提升。对limit的优化，不是直接使用limit，而是首先获取到offset的id，然后直接使用limit size来获取数据。<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fzf767ld4fj31640mewi6.jpg" alt=""><br><strong>为了保证index索引列连续，可以为每个表加一个自增字段，并且加上索引</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HttpServletRequest——获取URL方法</title>
      <link href="/post/19bd0d6c.html"/>
      <url>/post/19bd0d6c.html</url>
      
        <content type="html"><![CDATA[<h3 id="request-getRequestURL"><a href="#request-getRequestURL" class="headerlink" title="request.getRequestURL()"></a>request.getRequestURL()</h3><p>返回的是完整的url，包括Http协议，端口号，servlet名字和映射路径，但它不包含请求参数。</p><h3 id="request-getRequestURI"><a href="#request-getRequestURI" class="headerlink" title="request.getRequestURI()"></a>request.getRequestURI()</h3><pre><code>得到的是request URL的部分值，并且web容器没有decode过的</code></pre><h3 id="request-getContextPath"><a href="#request-getContextPath" class="headerlink" title="request.getContextPath()"></a>request.getContextPath()</h3><pre><code>返回 the context of the request.</code></pre><h3 id="request-getServletPath"><a href="#request-getServletPath" class="headerlink" title="request.getServletPath()"></a>request.getServletPath()</h3><pre><code>返回调用servlet的部分url.</code></pre><h3 id="request-getQueryString"><a href="#request-getQueryString" class="headerlink" title="request.getQueryString()"></a>request.getQueryString()</h3><pre><code>返回url路径后面的查询字符串</code></pre><h3 id="获得客户机信息"><a href="#获得客户机信息" class="headerlink" title="获得客户机信息"></a>获得客户机信息</h3><pre><code>getRequestURL方法返回客户端发出请求时的完整URL。getRequestURI方法返回请求行中的资源名部分。getQueryString 方法返回请求行中的参数部分。getRemoteAddr方法返回发出请求的客户机的IP地址 getRemoteHost方法返回发出请求的客户机的完整主机名getRemotePort方法返回客户机所使用的网络端口号getLocalAddr方法返回WEB服务器的IP地址。getLocalName方法返回WEB服务器的主机名 getMethod得到客户机请求方式</code></pre><h3 id="获得客户机请求头"><a href="#获得客户机请求头" class="headerlink" title="获得客户机请求头"></a>获得客户机请求头</h3><pre><code>getHeader(string name)方法 getHeaders(String name)方法 getHeaderNames方法 </code></pre><h3 id="获得客户机请求参数-客户端提交的数据"><a href="#获得客户机请求参数-客户端提交的数据" class="headerlink" title="获得客户机请求参数(客户端提交的数据)"></a>获得客户机请求参数(客户端提交的数据)</h3><pre><code>getParameter(name)方法getParameterValues（String name）方法getParameterNames方法 getParameterMap方法</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>序列化与反序列化</title>
      <link href="/post/4522df16.html"/>
      <url>/post/4522df16.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>计算机通讯中通讯双方需要约定协议,序列化与反序列化就是通信协议的一部分,在OSI七层协议模型的展示层中,需要把应用层的对象或数据结构转化为一段连续的二进制串,或把一段连续的二进制串转化为应用层的对象或数据结构</p><ul><li>序列化:将对象或数据结构转化为二进制串的过程</li><li>反序列化:将序列化生成的二进制串转化为对象或数据结构的过程</li></ul><h2 id="Java中的数据结构、对象、二进制串"><a href="#Java中的数据结构、对象、二进制串" class="headerlink" title="Java中的数据结构、对象、二进制串"></a>Java中的数据结构、对象、二进制串</h2><p>Java中最接近数据结构概念的就是POJO.<br>POJO是plain old Java object的简称,中文名为普通java类,具备一部分getter/setter方法的类就可称为POJO,其不允许携带业务方法,connection等,POJO也可称为简单的JavaBean,JavaBean是由Java语言写成的可复用组件,其有三个约定条件:</p><ol><li>必须有一个public的缺省构造函数</li><li>必须有getter/setter</li><li>这个类可序列化<br>因此很多人把JavaBean看作是遵循特定规则的POJO</li></ol><p>Java中的String与二进制串是不同的,String是Java中的一种特殊Object,而序列化后的二进制串所指的应该是Java原生数据类型byte[]</p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><p>在Java中可以直接将数据结构转为二进制串,也可以直接将二进制串转为数据结构<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] Serial(Object object) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">    objectOutputStream.writeObject(object);</span><br><span class="line">    <span class="keyword">byte</span>[] b = byteArrayOutputStream.toByteArray();</span><br><span class="line">    objectOutputStream.close();</span><br><span class="line">    byteArrayOutputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deSerial</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    ByteArrayInputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream(b);</span><br><span class="line">    ObjectInputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">    Object obj = objectInputStream.readObject();</span><br><span class="line">    objectInputStream.close();</span><br><span class="line">    byteArrayInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在有些需求中需要存储序列化后的二进制串,二进制串改变为字符串可以使用byteArrayOutputStream.toString(String chartsetName)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] Serial(Object object) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">    objectOutputStream.writeObject(object);</span><br><span class="line">    String b = byteArrayOutputStream.toString(<span class="string">"ISO-8859-1"</span>);</span><br><span class="line">    objectOutputStream.close();</span><br><span class="line">    byteArrayOutputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deSerial</span><span class="params">(String b)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayOutputStream(b.getBytes(<span class="string">"ISO-8859-1"</span>));</span><br><span class="line">    ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayInputStream);</span><br><span class="line">    Object obj = objectInputStream.readObject();</span><br><span class="line">    objectInputStream.close();</span><br><span class="line">    byteArrayInputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的转码必须使用ISO-8859-1</span></span><br></pre></td></tr></table></figure><p>参考:</p><ol><li><a href="https://www.infoq.cn/article/serialization-and-deserialization" target="_blank" rel="noopener">序列化与反序列化</a></li><li><a href="https://blog.csdn.net/qq_33642117/article/details/51896540" target="_blank" rel="noopener">POJO与JavaBean</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java学习路径</title>
      <link href="/post/ce57bc05.html"/>
      <url>/post/ce57bc05.html</url>
      
        <content type="html"><![CDATA[<p>1.计算机基础</p><pre><code>1.1数据结构基础    1.向量，链表，栈，队列和堆，词典。    2.树，二叉搜索树。    3.图，有向图，无向图，基本概念。    4.二叉搜索A，B，C类，9大排序。    5.树的前中后，层次，之字，最短路。    6.KMP等字符串算法。1.2操作系统    1.进程，线程，进程线程区别，进程间通信。    2.进程调度算法理解。    3.存储，虚拟内存，分页分段，内存调度算法。    4.文件系统，链式，索引。    5.死锁：原因，避免，解除。    6.Linux基本操作命令，会一门脚本编程：shell，1.3计算机网络    1.网络分层：五层，七层，四层等。    2.网络层：IP分类，子网划分，超网。ARP协议，ICMP协议。理解内部网关和外部网关，vpn等。    3.运输层：端口，UDP协议理解，TCP协议理解，三次握手，四次断开。    4.应用层：了解常用协议使用的端口和底层协议。    5.更加深入理解：TCP/IP 对拥塞控制，滑动窗口，如何实现可靠1.4基础算法    1.理解大O等记号。    2.动态规划如：几类背包问题，最好有现成的代码用于笔试。最长公共子序列。    3.贪心算法：理解赫夫曼编码（笔试常考概念）。    4.B树B+树用于理解数据库索引。    5.常用的图算法：广度优先，深度优先，最短路径算法（最好有现成的代码），最小生成树。</code></pre><hr><p>2.JAVA知识基础</p><pre><code>2.1JAVA基础(推荐书籍:《编程思想》)    1.掌握java常用技术，io、多线程、反射、常用集合框架。    2.对处理输入输出的IO进行熟悉，用于笔试。    3.对Iterator，Iterable和Comparable，Comparator了解，以及常用集合的遍历和排序。    4.对NIO一定要熟悉，以及了解JMS和RPC。    5.对JAVA基础概念要熟悉，比如抽象类和接口区别等，这些熟记。2.2JAVA源码    1.Hashmap，Hashtable，ConcurrentHashMap源码以及区别。    2.其他集合框架：LinkedHashMap，LinkedHashSet，Copy-On-Write等。    3.对Lock，Object，String等类的源码了解。2.3JAVA并发API(推荐书籍:应付笔试面试:《JAVA多线程编程与核心技术》真正神书:《JAVA并发编程实战》)    1.Synchronize和Lock的区别与用法。    2.wait()和await()，notify()和signal()，wait()和sleep()区别与用法。    3.其他的API用法：yield，join等。    4.voliate深入理解，以及CAS理解。    5.JAVA锁底层实现：自旋锁，阻塞锁，可重入锁，偏向锁，等。    6.线程池和阻塞队列。    7.以及一些常用的并发实现案例如生产者和消费者。2.4理解JVM(推荐书籍:《深入理解JAVA虚拟机》)    1.JAVA内存模型，哪个区域存放哪些内容。    2.引用技术法和可达性分析法。    3.对象的强、软、弱和虚引用区别与作用。    4.jvm垃圾回收机制，以及回收算法。    5.常见的OOM和SOF的原因和解决方案，以及通过什么工具进行分析。    6.常见的JVM输入参数熟悉。    7.了解GC停顿，逃逸分析，TLAB区，堆外内存等。    8.常用垃圾收集器：G1，CMS等。    9.了解常用性能监控工具：如visualvm、jconsole等。    10.必须熟悉虚拟机类加载机制，包括原理步骤，以及双亲委派方式的原理。</code></pre><hr><p>3.常规储备知识学习</p><pre><code>3.1数据库(推荐书籍:《sql入门》《Mysql必知必会》《深入理解:高性能Mysql》)    1.常用关联查询语法，自己所动手写几个。    2.数据库索引深入认识和理解。    3.JDBC学习。    4.常用数据库调优手段：比如通过索引调优。    5.InnoDB和MyISAM区别。    6.了解主键，外键，索引，唯一索引。    7.了解索引、视图、触发器、游标和存储过程。    8.常用关系型数据库和非关系型数据库：关系型了解：Mysql，Oracle；非关系型了解：redis，Hbase，monogodb等。3.2设计模式(推荐书籍:《设计模式之禅》)    1.单例模式的几种写法一定要会。    2.JDK中对应的设计模式：如IO中的装饰模式和适配器模式等。    3.框架中常用的设计模式：如Struts中的责任链模式，Spring中的工厂模式，动态代理模式等。    4.了解6大设计原则。3.3HTTP协议(推荐书籍:《HTTP权威指南》)    1.什么是HTTP，协议版本等。    2.学会使用浏览器查看HTTP请求与响应。    3.熟悉HTTP请求头和请求体。    4.熟悉HTTP响应头和响应体。    5.了解Rest风格。3.4神一般的Spring(推荐书籍:《Spring实战和Spring技术内幕》)    1.了解IOC原理和作用。    2.了解AOP原理和作用。    3.常用的XML配置。    4.Spring事务原理和使用。    5.SpringMVC。    6.了解Spring的webflow，远程服务，rest，消息，安全等。    7.新功能：Springboot和Springcloud。</code></pre><hr><p>4.后端学习之路</p><pre><code>4.1WEB后端学习之路(推荐书籍:可以选择一些SSH整合开发之类的)    1.JSP和Servlet学习。    2.XML和JSON解析学习。    3.前端知识：HTML、css，js。    4.JDBC学习，文件上传\下载，JAVAMail等。    5.可以利用jsp和Servlet开发简单项目。    6.接着框架学习：Struts2，Hibernate，Spring以及相互整合开发。    7.接着可以了解：SpringMvc，Mybatis，Lucene，shiro等。    8.利用框架实现简单项目比如CMS。4.2服务架构学习之路(推荐书籍:《分布式服务框架原理与实践和微服务设计》)(此部分笔试面试不一定学习)    1.了解SOA和微服务。    2.负载均衡：LVS，NGINX等。    3.RPC框架学习：RMI，Thrift等。    4.消息框架学习：ActiveMq等。    5.Netty通信框架学习。    6.服务框架：dubbo。4.3Hadoop学习之路(推荐书籍:《Hadoop权威指南》)(此部分笔试面试不一定学习)    1.熟悉mapReduce和HDfS。    2.Hadoop集群搭建。    3.了解：zk，hive，hbase，pig，mahout等。    4.zk几个常用作用如做注册中心，放配置信息等。</code></pre><p>======================================================================</p><p>java基础应该是从了解构造函数，重载和重写，类，面向对象，java的继承，封装，多态等以及集合数组，文件传输io流，以及java高级部分多线程编程，反射机制。还有企业级javaee jsp内容，sevlet，mvc，最后才是框架体系！这么说未必有点复制粘贴的嫌疑！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux命令使用技巧(持续更新)</title>
      <link href="/post/5fbcecef.html"/>
      <url>/post/5fbcecef.html</url>
      
        <content type="html"><![CDATA[<h2 id="rm命令与ls命令结合"><a href="#rm命令与ls命令结合" class="headerlink" title="rm命令与ls命令结合"></a>rm命令与ls命令结合</h2><p>如:删除2018年全年log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm `ls *2018*.log`</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>layui中jquery的运用</title>
      <link href="/post/47754c3c.html"/>
      <url>/post/47754c3c.html</url>
      
        <content type="html"><![CDATA[<h2 id="layui-form-on中如何获取当前行id"><a href="#layui-form-on中如何获取当前行id" class="headerlink" title="layui form.on中如何获取当前行id"></a>layui form.on中如何获取当前行id</h2><p>可以运用jquery对象,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">form.on(<span class="string">'switch(statusswitch)'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elem = $(obj.elem);</span><br><span class="line">    <span class="comment">//jquery中parents获取祖先元素,顺序为从最近的父元素,所以取first,并查找第0个td 即id</span></span><br><span class="line">    <span class="keyword">var</span> id = elem.parents(<span class="string">'tr'</span>).first().find(<span class="string">'td'</span>).eq(<span class="string">'0'</span>).text();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> layui </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原生安卓跳Google验证</title>
      <link href="/post/a59af150.html"/>
      <url>/post/a59af150.html</url>
      
        <content type="html"><![CDATA[<h2 id="原生安卓跳Google验证"><a href="#原生安卓跳Google验证" class="headerlink" title="原生安卓跳Google验证"></a>原生安卓跳Google验证</h2><p>刷机遇到的问题,刷现在的原生rom如pixele havocos,第一次进入系统时都需要连接Google验证,国内网络有问题,所以会出现验证不了,进不了系统的情况,知乎上看到个解决方法,进rec的终端输入以下一个命令即可</p><p><code>dd if=/dev/zero of=/dev/block/bootdevice/by-name/frp</code><br>或<br><code>dd if=/dev/zero of=/dev/block/bootdevice/by-name/config</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通信基础</title>
      <link href="/post/1748423c.html"/>
      <url>/post/1748423c.html</url>
      
        <content type="html"><![CDATA[<h2 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h2><p>TCP需要接受方与发送方建立连接后发送消息(像打电话,需先确定连接),适合可靠性要求较高的地方.<br>HTTP、TCP、Talent都需要可靠的通信频道<br>UDP是无连接通信协议,发送的数据包相互独立,顺序不重要,适合数据准确性要求不高的场合</p>]]></content>
      
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java线程</title>
      <link href="/post/8d977941.html"/>
      <url>/post/8d977941.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建线程时写run方法"><a href="#创建线程时写run方法" class="headerlink" title="创建线程时写run方法"></a>创建线程时写run方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>可在线程运行时join另一个线程<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Thread thread1 =  <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    sout(<span class="string">"test1"</span>);</span><br><span class="line">    thread2.join();</span><br><span class="line">    sout(<span class="string">"test2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        sout(count--);</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="中断程序"><a href="#中断程序" class="headerlink" title="中断程序"></a>中断程序</h2><p><code>thread.interrupt();</code></p><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>1-10级别<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread();</span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line">t.setPriority(num)</span><br></pre></td></tr></table></figure></p><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>同步锁synchronized,Java关键词,可修饰代码块,同步方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ···</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java集合类总结</title>
      <link href="/post/a384fc43.html"/>
      <url>/post/a384fc43.html</url>
      
        <content type="html"><![CDATA[<h2 id="集合类的关系"><a href="#集合类的关系" class="headerlink" title="集合类的关系"></a>集合类的关系</h2><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fynfw3u7ptj30o00a8mxl.jpg" alt=""></p><h2 id="List的LinkedList和ArrayList"><a href="#List的LinkedList和ArrayList" class="headerlink" title="List的LinkedList和ArrayList"></a>List的LinkedList和ArrayList</h2><ul><li>可重复</li><li>两个都是List接口的实现类,拓展数组的定长缺点</li><li>ArrayList有索引LinkedList无索引是又链表实现,所以LinkedList插入删除快,查找慢;ArrayList反之,插入删除慢,查找快</li></ul><h2 id="Set中的HashSet和TreeSet"><a href="#Set中的HashSet和TreeSet" class="headerlink" title="Set中的HashSet和TreeSet"></a>Set中的HashSet和TreeSet</h2><ul><li>不能由重复值</li><li>TreeSet实现了SortedSet,带排序</li><li>HashSet允许null</li></ul><h2 id="Map中的HashMap和TreeMap"><a href="#Map中的HashMap和TreeMap" class="headerlink" title="Map中的HashMap和TreeMap"></a>Map中的HashMap和TreeMap</h2><ul><li>HashMap是基于哈希表和Map的实现类,增删效率高,通过哈希码对其内部映射关系排序(无序),允许null,键有唯一性</li><li>LinkedHashMap 散列表+双向循环链表(<a href="https://www.cnblogs.com/skywang12345/p/3561803.html" target="_blank" rel="noopener">单链表和双向循环链表文章(作者的双向循环链表insert时有一处错误)</a>)</li><li>TreeMap的映射关系存在一定顺序,实现了SortedMap</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>logback配置文件</title>
      <link href="/post/ee60e5c0.html"/>
      <url>/post/ee60e5c0.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/maoyuanming0806/article/details/82085239" target="_blank" rel="noopener">https://blog.csdn.net/maoyuanming0806/article/details/82085239</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
            <tag> logback </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm框架c3p0连接池</title>
      <link href="/post/99224d24.html"/>
      <url>/post/99224d24.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/tuzongxun/article/details/55210139" target="_blank" rel="noopener">https://blog.csdn.net/tuzongxun/article/details/55210139</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql默认字段不生效问题</title>
      <link href="/post/438be412.html"/>
      <url>/post/438be412.html</url>
      
        <content type="html"><![CDATA[<h1 id="mysql默认字段不生效"><a href="#mysql默认字段不生效" class="headerlink" title="mysql默认字段不生效"></a>mysql默认字段不生效</h1><p>利用mybatis做持久层在navicat设置字段的默认值为1不生效,翻阅资料发现有12年的文章写的就很详细了<br>上:<a href="https://cs-css.iteye.com/blog/1757249" target="_blank" rel="noopener">https://cs-css.iteye.com/blog/1757249</a><br>下:<a href="https://cs-css.iteye.com/blog/1757598" target="_blank" rel="noopener">https://cs-css.iteye.com/blog/1757598</a></p><p>我在使用idea插件生成出的代码,使用这个代码就可以插入时给默认值不会给null了,应该是在插入前检查该字段不为null再插入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--auto generated Code--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"deviceManage.id"</span>&gt;</span></span><br><span class="line">        INSERT INTO s_deviceManage</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.id!=null"</span>&gt;</span> id,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.hostid!=null"</span>&gt;</span> hostid,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.storeHostId!=null"</span>&gt;</span> storeHostId,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.deviceid!=null"</span>&gt;</span> deviceid,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.status!=null"</span>&gt;</span> status,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.sessionid!=null"</span>&gt;</span> sessionid,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.token!=null"</span>&gt;</span> token,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.event!=null"</span>&gt;</span> event,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.roomid!=null"</span>&gt;</span> roomid,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.taskid!=null"</span>&gt;</span> taskid,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        VALUES</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.id!=null"</span>&gt;</span>#&#123;deviceManage.id,jdbcType=INTEGER&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.hostid!=null"</span>&gt;</span>#&#123;deviceManage.hostid,jdbcType=INTEGER&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.storeHostId!=null"</span>&gt;</span>#&#123;deviceManage.storeHostId,jdbcType=INTEGER&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.deviceid!=null"</span>&gt;</span>#&#123;deviceManage.deviceid,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.status!=null"</span>&gt;</span>#&#123;deviceManage.status,jdbcType=INTEGER&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.sessionid!=null"</span>&gt;</span>#&#123;deviceManage.sessionid,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.token!=null"</span>&gt;</span>#&#123;deviceManage.token,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.event!=null"</span>&gt;</span>#&#123;deviceManage.event,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.roomid!=null"</span>&gt;</span>#&#123;deviceManage.roomid,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deviceManage.taskid!=null"</span>&gt;</span>#&#123;deviceManage.taskid,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm NullPointerException和BindingException错误</title>
      <link href="/post/8276dad9.html"/>
      <url>/post/8276dad9.html</url>
      
        <content type="html"><![CDATA[<h1 id="BindingException"><a href="#BindingException" class="headerlink" title="BindingException"></a>BindingException</h1><p>将mapper和xml和分别放在不同目录并在springxml中分别注入</p><h1 id="NullPointerException"><a href="#NullPointerException" class="headerlink" title="NullPointerException"></a>NullPointerException</h1><p>@Autowired不能给static注解所以导致了这个错误<br>网上说定义static变量并用@Autowire注解set该变量的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"NewClass"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SomeThing someThing;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSomeThing</span><span class="params">(SomeThing someThing)</span></span>&#123;</span><br><span class="line">        NewClass.someThing = someThing;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或使用@PostConstruct<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> AutowiredTypeComponent component;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> AutowiredTypeComponent autowiredComponent;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@PostConstruct</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      component = <span class="keyword">this</span>.autowiredComponent;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      component.callTestMethod();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注:我的坑一直是在@Component没有写</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring+springmvc+mybatis框架出配置文件</title>
      <link href="/post/a9a0f06.html"/>
      <url>/post/a9a0f06.html</url>
      
        <content type="html"><![CDATA[<h2 id="spring-springmvc-mybatis"><a href="#spring-springmvc-mybatis" class="headerlink" title="spring+springmvc+mybatis"></a>spring+springmvc+mybatis</h2><p>这个bug解了好多小时,最后是在pom.xml中设置了&lt;spring.version&gt;xxx&lt;/spring.version&gt; 中间改过很多spring-mybaits.xml和spring-mvc.xml,现在直接贴文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-mybatis.xml--&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.aop.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据库相关参数properties的属性：$&#123;url&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;c3p0.maxPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;c3p0.minPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"$&#123;c3p0.autoCommitOnClose&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;c3p0.checkoutTimeout&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"$&#123;c3p0.acquireRetryAttempts&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.aop.model"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:**/dao/impl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.aop.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-mvc.xml--&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring自动扫描base-pack目录下的所有Java文件，包括子目录。如果扫描到有相关注解的类，就把这些类注册为Spring的bean。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.aop.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置annotation类型的处理映射器，它根据请求查找映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置annotation类型的处理器适配器，完成对@RequestMapping标注方法的调用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:ignoreDefaultModelOnRedirect</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置springMVC需要加载的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 匹配所有请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#jdbc.properties</span><br><span class="line">driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbcUrl=jdbc:mysql://localhost:3306/acp?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="line">username=root</span><br><span class="line">password=wuruizhi</span><br><span class="line"></span><br><span class="line">#最大连接数</span><br><span class="line">c3p0.maxPoolSize=30</span><br><span class="line">#最小连接数</span><br><span class="line">c3p0.minPoolSize=10</span><br><span class="line">#关闭连接后不自动commit</span><br><span class="line">c3p0.autoCommitOnClose=false</span><br><span class="line">#获取连接超时时间</span><br><span class="line">c3p0.checkoutTimeout=10000</span><br><span class="line">#当获取连接失败重试次数</span><br><span class="line">c3p0.acquireRetryAttempts=2</span><br></pre></td></tr></table></figure><h2 id="spring添加json返回支持"><a href="#spring添加json返回支持" class="headerlink" title="spring添加json返回支持"></a>spring添加json返回支持</h2><ol><li><p>可以在springmvcXML中手动添加</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:ignoreDefaultModelOnRedirect</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以直接添加注解@ResponseBody</p></li></ol><p>注:两者都需要有jar包</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
            <tag> Spring </tag>
            
            <tag> SSM框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mybatis 简单demo</title>
      <link href="/post/2b85684a.html"/>
      <url>/post/2b85684a.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://liuyanwei.jumppo.com/2015/07/07/mybatis.html" target="_blank" rel="noopener">http://liuyanwei.jumppo.com/2015/07/07/mybatis.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>连接ssh问题</title>
      <link href="/post/21b0094e.html"/>
      <url>/post/21b0094e.html</url>
      
        <content type="html"><![CDATA[<h2 id="centos-ssh空闲断开问题"><a href="#centos-ssh空闲断开问题" class="headerlink" title="centos ssh空闲断开问题"></a>centos ssh空闲断开问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 客户端发送心跳</span></span><br><span class="line">ServerAliveInterval 20</span><br><span class="line">ServerAliveCountMax 999</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务端发送心跳</span></span><br><span class="line">ClientAliveInterval 60</span><br><span class="line">ClientAliveCountMax 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java变量初始化</title>
      <link href="/post/6fbf28a6.html"/>
      <url>/post/6fbf28a6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java成员变量和局部变量的初始化"><a href="#Java成员变量和局部变量的初始化" class="headerlink" title="Java成员变量和局部变量的初始化"></a>Java成员变量和局部变量的初始化</h2><p>成员变量定义时Java虚拟机会自动初始化<br>但是在方法中的局部变量不会被自动初始化</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用nginx搭建静态图片服务器</title>
      <link href="/post/3c94ccba.html"/>
      <url>/post/3c94ccba.html</url>
      
        <content type="html"><![CDATA[<h3 id="使用brew安装nginx并修改配置文件"><a href="#使用brew安装nginx并修改配置文件" class="headerlink" title="使用brew安装nginx并修改配置文件"></a>使用brew安装nginx并修改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>安装后配置文件在<code>/usr/local/etc/nginx/nginx.conf</code></p><p>在配置文件中可以添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 8089;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location /upload&#123;</span><br><span class="line">        root xxx/;</span><br><span class="line">        access_log on;</span><br><span class="line">        autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>sudo nginx -s reload</code>重启nginx服务，即可在<code>localhost:8089</code>访问xxx/upload下的静态文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql数据库存入中文变乱码的问题</title>
      <link href="/post/3910882d.html"/>
      <url>/post/3910882d.html</url>
      
        <content type="html"><![CDATA[<h2 id="mysql数据库中存入中文数据变成乱码的问题"><a href="#mysql数据库中存入中文数据变成乱码的问题" class="headerlink" title="mysql数据库中存入中文数据变成乱码的问题"></a>mysql数据库中存入中文数据变成乱码的问题</h2><p>今天遇到了这个问题在搜集了资料发现了可用在mysql配置文件my.cnf中增加下列配置项解决<br>首先在mysql中查看当前mysql字符集类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;char%&apos;;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fynfw2kccnj30zc0ea408.jpg" alt=""><br>上图是我已经改过的类型，可以发现character_set_server的字符类型都为utf-8</p><p>如果发现character_set_server不为utf-8，可以在my.cnf中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">character-set-server=utf8  </span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></p><h2 id="mac系统没找到my-cnf解决办法"><a href="#mac系统没找到my-cnf解决办法" class="headerlink" title="mac系统没找到my.cnf解决办法"></a>mac系统没找到my.cnf解决办法</h2><p>在终端输入mysql –help | grep ‘Default options’ -A 1可以查看mysql服务读取的my.cnf目录<br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fynfw3gv01j30tq05sjs5.jpg" alt=""></p><p>如果在目录中都没有找到则自己在任意目录创建一个my.cnf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"># Example MySQL config file for small systems.  </span><br><span class="line">#  </span><br><span class="line"># This is for a system with little memory (&lt;= 64M) where MySQL is only used  </span><br><span class="line"># from time to time and it&apos;s important that the mysqld daemon  </span><br><span class="line"># doesn&apos;t use much resources.  </span><br><span class="line">#  </span><br><span class="line"># MySQL programs look for option files in a set of  </span><br><span class="line"># locations which depend on the deployment platform.  </span><br><span class="line"># You can copy this option file to one of those  </span><br><span class="line"># locations. For information about these locations, see:  </span><br><span class="line"># http://dev.mysql.com/doc/mysql/en/option-files.html  </span><br><span class="line">#  </span><br><span class="line"># In this file, you can use all long options that a program supports.  </span><br><span class="line"># If you want to know which options a program supports, run the program  </span><br><span class="line"># with the &quot;--help&quot; option.  </span><br><span class="line"></span><br><span class="line"># The following options will be passed to all MySQL clients  </span><br><span class="line">[client]  </span><br><span class="line">default-character-set=utf8  </span><br><span class="line">#password   = your_password  </span><br><span class="line">port        = 3306 </span><br><span class="line">socket      = /tmp/mysql.sock  </span><br><span class="line"></span><br><span class="line"># Here follows entries for some specific programs  </span><br><span class="line"></span><br><span class="line"># The MySQL server   </span><br><span class="line">[mysqld]  </span><br><span class="line">default-storage-engine=INNODB  </span><br><span class="line">character-set-server=utf8  </span><br><span class="line">collation-server=utf8_general_ci  </span><br><span class="line">port        = 3306 </span><br><span class="line">socket      = /tmp/mysql.sock  </span><br><span class="line">skip-external-locking  </span><br><span class="line">key_buffer_size = 16K  </span><br><span class="line">max_allowed_packet = 1M  </span><br><span class="line">table_open_cache = 4 </span><br><span class="line">sort_buffer_size = 64K  </span><br><span class="line">read_buffer_size = 256K  </span><br><span class="line">read_rnd_buffer_size = 256K  </span><br><span class="line">net_buffer_length = 2K  </span><br><span class="line">thread_stack = 128K  </span><br><span class="line"></span><br><span class="line"># Don&apos;t listen on a TCP/IP port at all. This can be a security enhancement,  </span><br><span class="line"># if all processes that need to connect to mysqld run on the same host.  </span><br><span class="line"># All interaction with mysqld must be made via Unix sockets or named pipes.  </span><br><span class="line"># Note that using this option without enabling named pipes on Windows  </span><br><span class="line"># (using the &quot;enable-named-pipe&quot; option) will render mysqld useless!  </span><br><span class="line">#   </span><br><span class="line">#skip-networking  </span><br><span class="line">server-id   = 1 </span><br><span class="line"></span><br><span class="line"># Uncomment the following if you want to log updates  </span><br><span class="line">#log-bin=mysql-bin  </span><br><span class="line"></span><br><span class="line"># binary logging format - mixed recommended  </span><br><span class="line">#binlog_format=mixed  </span><br><span class="line"></span><br><span class="line"># Causes updates to non-transactional engines using statement format to be  </span><br><span class="line"># written directly to binary log. Before using this option make sure that  </span><br><span class="line"># there are no dependencies between transactional and non-transactional  </span><br><span class="line"># tables such as in the statement INSERT INTO t_myisam SELECT * FROM  </span><br><span class="line"># t_innodb; otherwise, slaves may diverge from the master.  </span><br><span class="line">#binlog_direct_non_transactional_updates=TRUE  </span><br><span class="line"></span><br><span class="line"># Uncomment the following if you are using InnoDB tables  </span><br><span class="line">#innodb_data_home_dir = /usr/local/mysql/data  </span><br><span class="line">#innodb_data_file_path = ibdata1:10M:autoextend  </span><br><span class="line">#innodb_log_group_home_dir = /usr/local/mysql/data  </span><br><span class="line"># You can set .._buffer_pool_size up to 50 - 80 %  </span><br><span class="line"># of RAM but beware of setting memory usage too high  </span><br><span class="line">#innodb_buffer_pool_size = 16M  </span><br><span class="line">#innodb_additional_mem_pool_size = 2M  </span><br><span class="line"># Set .._log_file_size to 25 % of buffer pool size  </span><br><span class="line">#innodb_log_file_size = 5M  </span><br><span class="line">#innodb_log_buffer_size = 8M  </span><br><span class="line">#innodb_flush_log_at_trx_commit = 1 </span><br><span class="line">#innodb_lock_wait_timeout = 50 </span><br><span class="line"></span><br><span class="line">[mysqldump]  </span><br><span class="line">quick  </span><br><span class="line">max_allowed_packet = 16M  </span><br><span class="line"></span><br><span class="line">[mysql]  </span><br><span class="line">no-auto-rehash  </span><br><span class="line"># Remove the next comment character if you are not familiar with SQL  </span><br><span class="line">#safe-updates  </span><br><span class="line"></span><br><span class="line">[myisamchk]  </span><br><span class="line">key_buffer_size = 8M  </span><br><span class="line">sort_buffer_size = 8M  </span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]  </span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java利用fastjson判断字符串是否为一个json</title>
      <link href="/post/983319f.html"/>
      <url>/post/983319f.html</url>
      
        <content type="html"><![CDATA[<h2 id="利用maven导入fastjson"><a href="#利用maven导入fastjson" class="headerlink" title="利用maven导入fastjson"></a>利用maven导入fastjson</h2><p><a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">fastjson</a>是一个阿里开源的java组件，可用maven导入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>*<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="利用fastjson判断字符串是否为一个json"><a href="#利用fastjson判断字符串是否为一个json" class="headerlink" title="利用fastjson判断字符串是否为一个json"></a>利用fastjson判断字符串是否为一个json</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isJson</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Object ob = com.alibaba.fastjson.JSON.parse(str);</span><br><span class="line">        result = <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        result = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Json在Java中的使用</title>
      <link href="/post/bf2ff129.html"/>
      <url>/post/bf2ff129.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用maven导入JSONObject包"><a href="#使用maven导入JSONObject包" class="headerlink" title="使用maven导入JSONObject包"></a>使用maven导入JSONObject包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jdk15<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一些JSONObject方法"><a href="#一些JSONObject方法" class="headerlink" title="一些JSONObject方法"></a>一些JSONObject方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从Object构造</span></span><br><span class="line">JSONObject json = JSONObject.fromObject(request.bodyToString());</span><br><span class="line"><span class="comment">//自构造</span></span><br><span class="line">JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">json.put(<span class="string">"name"</span>,<span class="string">"lilei"</span>);</span><br><span class="line">json.put(<span class="string">"key"</span>,<span class="string">"aaa"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Idea在创建struts项目时找不到Jar包的情况</title>
      <link href="/post/3bcc9f8e.html"/>
      <url>/post/3bcc9f8e.html</url>
      
        <content type="html"><![CDATA[<p><strong>这篇文章介绍的十分详细，主要就是tomcat的机制无法找到jar包，具体操作方法如下<a href="https://blog.csdn.net/shuai_wy/article/details/79027573" target="_blank" rel="noopener">https://blog.csdn.net/shuai_wy/article/details/79027573</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java和Mysql数据类型对应表</title>
      <link href="/post/8f912a20.html"/>
      <url>/post/8f912a20.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java和Mysql数据类型对应"><a href="#Java和Mysql数据类型对应" class="headerlink" title="Java和Mysql数据类型对应"></a>Java和Mysql数据类型对应</h2><table><thead><tr><th>类型名</th><th>显示长度</th><th>数据库类型</th><th>Java类型</th><th>JDBC类型索引(int)</th></tr></thead><tbody><tr><td>VARCHAR</td><td>L+N</td><td>VARCHAR</td><td>java.lang.String</td><td>12</td></tr><tr><td>CHAR</td><td>N</td><td>CHAR</td><td>java.lang.String</td><td>1</td></tr><tr><td>BLOB</td><td>L+N</td><td>BLOB</td><td>java.lang.byte[]</td><td>-4</td></tr><tr><td>TEXT</td><td>65535</td><td>VARCHAR</td><td>java.lang.String</td><td>-1</td></tr><tr><td>—</td><td>—</td><td>—</td><td>—</td><td>—</td></tr><tr><td>INTEGER</td><td>4</td><td>INTEGER UNSIGNED</td><td>java.lang.Long</td><td>4</td></tr><tr><td>TINYINT</td><td>3</td><td>TINYINT UNSIGNED</td><td>java.lang.Integer</td><td>-6</td></tr><tr><td>SMALL INT</td><td>5</td><td>SMALLINT UNSIGNED</td><td>java.lang.Integer</td><td>5</td></tr><tr><td>MEDIUMINT</td><td>8</td><td>MEDIUMINT UNSIGNED</td><td>java.lang.Integer</td><td>4</td></tr><tr><td>BIT</td><td>1</td><td>VIT</td><td>java.lang.Boolean</td><td>-7</td></tr><tr><td>BIGINT</td><td>20</td><td>BIGINT UNSIGNED</td><td>java.lang.BigInteger</td><td>-5</td></tr><tr><td>FLOAT</td><td>4+8</td><td>FLOAT</td><td>java.lang.Float</td><td>7</td></tr><tr><td>DOUBLE</td><td>22</td><td>DOUBLE</td><td>java.lang.Double</td><td>8</td></tr><tr><td>DECIMAL</td><td>11</td><td>DECIMAL</td><td>java.math.BigDecimal</td><td>3</td></tr><tr><td>BOOLEAN</td><td>1</td><td>TINYINT UNSIGNED</td><td>java.lang.Integer</td><td>-6</td></tr><tr><td>—</td><td>—</td><td>—</td><td>—</td><td>—</td></tr><tr><td>ID</td><td>11</td><td>PK(INTEGER UNSIGNED)</td><td>java.lang.Long</td><td>4</td></tr><tr><td>—</td><td>—</td><td>—</td><td>—</td><td>—</td></tr><tr><td>DATE</td><td>10</td><td>DATE</td><td>java.sql.Date</td><td>91</td></tr><tr><td>TIME</td><td>8</td><td>TIME</td><td>java.sql.Time</td><td>92</td></tr><tr><td>DATETIME</td><td>19</td><td>DATETIME</td><td>java.sql.Timestamp</td><td>93</td></tr><tr><td>TIMESTAMP</td><td>19</td><td>TIMESTAMP</td><td>java.sql.Timestamp</td><td>93</td></tr><tr><td>YEAR</td><td>4</td><td>YEAR</td><td>java.sql.Date</td><td>91</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java web mvc目录结构</title>
      <link href="/post/9729753f.html"/>
      <url>/post/9729753f.html</url>
      
        <content type="html"><![CDATA[<h2 id="MVC目录结构"><a href="#MVC目录结构" class="headerlink" title="MVC目录结构"></a>MVC目录结构</h2><p>MVC面向对象编程可以使得编程分工更明确，耦合成程度更低</p><ul><li>dao     数据库的交互工作（CURD）</li><li>model   对应实体表，User、Admin、Order</li><li>service 处理业务逻辑的（应用dao数据库操作）</li><li>controller  控制器</li></ul><p><a href="https://zhuanlan.zhihu.com/p/30555201s" target="_blank" rel="noopener">这篇文章写的很清晰</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql笔记1</title>
      <link href="/post/cccce4e5.html"/>
      <url>/post/cccce4e5.html</url>
      
        <content type="html"><![CDATA[<h3 id="mysql部分约束使用"><a href="#mysql部分约束使用" class="headerlink" title="mysql部分约束使用"></a>mysql部分约束使用</h3><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE pritest(</span><br><span class="line">    id INT(10) NOT NULL,</span><br><span class="line">    name CHAR(20) NOT NULL,</span><br><span class="line">    PRIMARY KEY pk_test(id)</span><br><span class="line">)ENGINE=innodb;</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE foretest(</span><br><span class="line">    id INT(10) NOT NULL,</span><br><span class="line">    foid INT(10) NOT NULL,</span><br><span class="line">    FOREIGN KEY (foid) REFERENCES pritest(id)</span><br><span class="line">)ENGINE=innodb;</span><br></pre></td></tr></table></figure><h3 id="清空表且主键重置"><a href="#清空表且主键重置" class="headerlink" title="清空表且主键重置"></a>清空表且主键重置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE pritest;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java基础api学习</title>
      <link href="/post/5f9b355f.html"/>
      <url>/post/5f9b355f.html</url>
      
        <content type="html"><![CDATA[<h2 id="String和StringBuffer"><a href="#String和StringBuffer" class="headerlink" title="String和StringBuffer"></a>String和StringBuffer</h2><p>String类字符串创建后是不能改变的，在使用中会出现大量冗余，如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"aaa"</span>;</span><br><span class="line">str.concat(<span class="string">"bb"</span>);<span class="comment">//此时产生了三个String对象，'aaa','bb','aaabb'</span></span><br></pre></td></tr></table></figure><p> StringBuffer类是可变的，不会出现创建冗余的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"aaa"</span>);</span><br><span class="line">bf.append(<span class="string">"bbb"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jdbc学习</title>
      <link href="/post/e7548473.html"/>
      <url>/post/e7548473.html</url>
      
        <content type="html"><![CDATA[<h2 id="注册JDBC驱动"><a href="#注册JDBC驱动" class="headerlink" title="注册JDBC驱动"></a>注册JDBC驱动</h2><p>在使用JDBC前需要注册驱动，将数据库的驱动类加载到内存中，下面介绍两种方法加载驱动程序：</p><ol><li><p>Class.forName()</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassNotFoundException ex)&#123;</span><br><span class="line">    System.out.println(<span class="string">"Error"</span>);</span><br><span class="line">    System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>DriverManager.registerDriver();</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Driver driver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line">DriverManager.registerDriver(driver);</span><br></pre></td></tr></table></figure></li></ol><h2 id="连接指定数据库"><a href="#连接指定数据库" class="headerlink" title="连接指定数据库"></a>连接指定数据库</h2><p>加载数据库驱动以后可以使用DriverManager.getConnection()方法连接数据库<br>getConnection方法有三个重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getConnection(String url)</span><br><span class="line">getConnection(String url,Properties pro)</span><br><span class="line">getConnection(String url,String username,String password)</span><br></pre></td></tr></table></figure><h2 id="创建连接对象"><a href="#创建连接对象" class="headerlink" title="创建连接对象"></a>创建连接对象</h2><ol><li><p>使用数据库URL和账号密码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. getConnection(URL,USERNAME,PASSWORD);</span></span><br><span class="line">String URL = <span class="string">"jdbc:mysql://localhost:3306/example"</span>;</span><br><span class="line">String user = <span class="string">"uername"</span>;</span><br><span class="line">String password = <span class="string">"password"</span>;</span><br><span class="line">Connection conn = DriverManager.getConnection(URL,user,password);</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. getConnection(URL);</span></span><br><span class="line">String URL = <span class="string">"jdbc:mysql://localhost:3306/example?user=root&amp;passwordtest"</span>;</span><br><span class="line">Connection conn = DriverManager.getConnection(URL);</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. getConnection(URL,pro);</span></span><br><span class="line">String URL = <span class="string">"jdbc:mysql://localhost:3306/example"</span>;</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">pro.put(<span class="string">"user"</span>,<span class="string">"root"</span>);</span><br><span class="line">pro.put(<span class="string">"password"</span>,<span class="string">""</span>);</span><br><span class="line">Connection conn = DriverManager.getConnection(URL,pro);</span><br></pre></td></tr></table></figure></li></ol><h2 id="JDBC接口"><a href="#JDBC接口" class="headerlink" title="JDBC接口"></a>JDBC接口</h2><ul><li>Statement(当在运行使用SQL语句时)</li><li>CallableStatement(当要访问数据库中的存储过程时)</li><li>PreparedStatement(当计划多次使用SQL语句时)</li></ul><ol><li><p>Statement</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    stmt = conn.createStatment();</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    stmt.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>Statement中有三个常用方法- boolean execute(String SQL)- int executeUpdate(String SQL) 用于执行insert、update或delete语句，返回受影响行数- ResultexecuteQuery(String SQL) 返回ResultSet对象，一般用于select这样的产生单个结果集的语句</code></pre><ol start="2"><li><p>PreparedStatement（拓展了Statement接口）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    String SQL = <span class="string">"Update Student SET age = ? where id = ?"</span>;</span><br><span class="line">    pstmt = conn.prepareStatement(SQL);</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    pstmt.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="ResultSet结果集"><a href="#ResultSet结果集" class="headerlink" title="ResultSet结果集"></a>ResultSet结果集</h2><p>ResultSet是查询数据库返回结果的数据表<br>其接口可分为三个方法：</p><ul><li>导航方法：用于移动光标</li><li>获取方法：查看当前行的光标所指的列中的数据</li><li>更新方法：用于更新当前行的列中的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RSType表示ResultSet对象类型，RSConcurrency是ResultSet常量，用于指向一个结果只是否为只读或可更新</span></span><br><span class="line"><span class="comment">//不指定ResultSet类型则默认为TYPE_FORWARD_ONLY</span></span><br><span class="line"><span class="comment">//不置顶ResultSet并发类型则默认为CONCUR_READ_ONLY</span></span><br><span class="line">createStatement(<span class="keyword">int</span> RSType,<span class="keyword">int</span> RSConcurrency);</span><br><span class="line">prepareStatement(String SQL,<span class="keyword">int</span> RSType,<span class="keyword">int</span> RSConcurrency);</span><br><span class="line">prepareCall(String sql,<span class="keyword">int</span> RSType,<span class="keyword">int</span> RSConcurrency);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个双向、可更新的ResultSet对象</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Statement stmt = conn.createStatement(ResltSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SQL事务"><a href="#SQL事务" class="headerlink" title="SQL事务"></a>SQL事务</h2><p>事务是把一组SQL语句作为一个逻辑单元进行运行，保证多条SQL语句在同一时间一同执行，事务中的一条语句执行失败则整个事务失败。<br>JDBC驱动默认使用auto-commit模式，假设需要使用事务，需要先使用Connection的setAutoCommit方法，传递一个false则可以关闭自动提交，传true则重新开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">conn = DriverManager.getConnection(URL);</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//使用commit()提交</span></span><br><span class="line">conn.commit();</span><br><span class="line"><span class="comment">//当出现异常，使用rollback()回滚</span></span><br><span class="line">conn.rollback();</span><br></pre></td></tr></table></figure><h2 id="JDBC异常处理"><a href="#JDBC异常处理" class="headerlink" title="JDBC异常处理"></a>JDBC异常处理</h2><ul><li>getErrorCode()   获取QLException对象的特定与供应商的异常代码</li><li>getNectException() 通过setNexeException(SQLException ex)获取链接到此SQLException对象的异常</li><li>getSQLtate()    获取SQLException对象的SQLState</li><li>iterator()     返回在链接的SQLExceptions上进行迭代的迭代器</li><li>setNextException(SQLException ex)  将SQLException对象添加到链接的末尾</li></ul><h2 id="JDBC批量处理"><a href="#JDBC批量处理" class="headerlink" title="JDBC批量处理"></a>JDBC批量处理</h2><p>批处理和事务类似，可以提高性能 ，不过JDBC不支持此功能，可以使用DatabaseMetaData.supportsBatchUpdates()方法的返回值来确定目标数据库是否支持批量更新处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">String SQL = <span class="string">"insert into Students (id,name,age) values(7,'mike',21)"</span>;</span><br><span class="line">stmt.addBatch(SQL);</span><br><span class="line">SQL = <span class="string">"insert into Students(id,name,age) values(8,'lili',22)"</span>;</span><br><span class="line">stmt.addBatch(SQL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] count = stmt.executeBatch();</span><br><span class="line"></span><br><span class="line">conn.commit();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用PreparedStatement</span></span><br><span class="line">String SQL = <span class="string">"insert into Employees(id,name,age) values(?,?,?);"</span></span><br><span class="line">PreparedStatement pstmt = conn.preparedStatement(SQL);</span><br><span class="line"></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">pstmt.setInt(<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">pstmt.seString(<span class="number">2</span>,<span class="string">'liwei'</span>);</span><br><span class="line">pstmt.setInt(<span class="number">3</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">pstmt.addBatch();</span><br><span class="line"></span><br><span class="line">pstmt.setInt(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">pstmt.setString(<span class="number">2</span>,<span class="string">'wei'</span>);</span><br><span class="line">pstmt.setInt(<span class="number">3</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">pstmt.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] count = pstmt.executeBatch();</span><br><span class="line"></span><br><span class="line">conn.commit;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java验证码实现</title>
      <link href="/post/837318e7.html"/>
      <url>/post/837318e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="验证码Java实现"><a href="#验证码Java实现" class="headerlink" title="验证码Java实现"></a>验证码Java实现</h2><p>直接上代码附注释：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.font.FontRenderContext;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.Rectangle2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CaptcahCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">drawImage</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            sb.append(randomchar());</span><br><span class="line">        &#125;</span><br><span class="line">        String code = sb.toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">120</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">25</span>;</span><br><span class="line">        <span class="comment">//BufferdImage 加载图像到内存缓冲区</span></span><br><span class="line">        BufferedImage bi = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_3BYTE_BGR);</span><br><span class="line">        <span class="comment">//Graphics2D 绘画类</span></span><br><span class="line">        Graphics2D g = bi.createGraphics();</span><br><span class="line">        Font font = <span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>,Font.PLAIN,<span class="number">20</span>);</span><br><span class="line">        Color color = <span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//设置字体和颜色</span></span><br><span class="line">        g.setFont(font);</span><br><span class="line">        g.setColor(color);</span><br><span class="line">        <span class="comment">//设置背景颜色 白</span></span><br><span class="line">        g.setBackground(<span class="keyword">new</span> Color(<span class="number">226</span>,<span class="number">225</span>,<span class="number">225</span>));</span><br><span class="line">        <span class="comment">//设置矩形大小</span></span><br><span class="line">        g.clearRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line">        <span class="comment">//获取GraphicsD上下文</span></span><br><span class="line">        FontRenderContext context = g.getFontRenderContext();</span><br><span class="line">        <span class="comment">//获取字体高宽</span></span><br><span class="line">        Rectangle2D bounds = font.getStringBounds(code,context);</span><br><span class="line">        <span class="keyword">double</span> x = (width-bounds.getWidth())/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> y = (height-bounds.getHeight())/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> ascent = bounds.getY();</span><br><span class="line">        <span class="keyword">double</span> baseY = y-ascent;</span><br><span class="line">        g.drawString(code,(<span class="keyword">int</span>)x,(<span class="keyword">int</span>)baseY);</span><br><span class="line">        g.dispose();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImageIO.write(bi,<span class="string">"JPG"</span>,response.getOutputStream());</span><br><span class="line">            response.flushBuffer();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">randomchar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String string = <span class="string">"1234567890qazxswedcvfrtgbnhyujmkiolp"</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> string.charAt(random.nextInt(string.length()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用kcaptcha框架实现"><a href="#使用kcaptcha框架实现" class="headerlink" title="使用kcaptcha框架实现"></a>使用kcaptcha框架实现</h2><p>引入kcaptcha包再servlet映射即可，如果需要不同的效果，可以在init-param配置</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用Java来监测文件夹变化并自动部署hexo 2.0</title>
      <link href="/post/36756bf7.html"/>
      <url>/post/36756bf7.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>上篇博客使用了Java方法实现了自动监控文件夹变化并自动部署hexo的Java程序,但是不断的加功能减功能后让我觉得这个代码又臭又长,背离了我原先只想快速更博的初衷.于是乎,我想到了一个新的方法,写一个bash,并用快捷键快速部署</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>bash代码,非常简单,一句话而已<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> ~/hexo &amp;&amp;hexo clean &amp;&amp; hexo d -g</span><br></pre></td></tr></table></figure></p><h2 id="键盘映射"><a href="#键盘映射" class="headerlink" title="键盘映射"></a>键盘映射</h2><p>使用Alfred新建一个hotkeys,并新建一个Action-open file,可以使用iterm2或mac自带的终端运行写好的命令,我使用的是capslocks+d</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这是一个懒癌晚期程序员想要快点部署博客的脚本而已,只是一个命令的事,但是我经常用到这个命令,又想自动化,于是一开始动手的时候先入为主的想自动监控文件夹变化再自动部署,但是在这一场景下使用快捷键就够了.在使用手动输入命令时,需要:先使用capslock+3(我事先设置好的)调出我的iterm2-&gt;cd到对应目录&gt;输入部署命令&gt;敲个回车,而现在这些只要capslock+d就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用Java来监测文件夹变化并自动部署hexo</title>
      <link href="/post/de90c921.html"/>
      <url>/post/de90c921.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要做这个自动部署脚本"><a href="#为什么要做这个自动部署脚本" class="headerlink" title="为什么要做这个自动部署脚本"></a>为什么要做这个自动部署脚本</h2><p>在前不久使用了Hexo作为blog框架，Hexo直接将markdown生成静态页面，并用命令就可以直接部署在github page或个人服务器上，使得网站浏览高效，写作过程简单。<br>但是在使用过程中，每次写作完成都要重新部署<code>hexo clean &amp;&amp; hexo d -g</code>或者每次更改了博客设置，预览都需要先敲一个<code>hexo s</code>让人不爽，作为一名<del>又懒又笨的程序员</del>，本着可以自动化绝不多敲一行代码的精神，在搜集了多方hexo自动化资料之后终于决定，自己动手(其实是看不懂网上自动化一些工具的教程)。 </p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><p>因为前期已经改好博客设置，特别是在<code>hexo clean &amp;&amp; hexo d -g</code>这一步，已经不需要每次都输入一次密码，所以这次工作流程其实可以简化成:<strong>监听文件夹状态-&gt;从文件夹更改状态决定部署博客还是预览博客</strong>，如下图<br><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fwsperk51yj30kk0me75h.jpg" width="70%" height="70%" align="center"><br>很简单的需求，直接开搞</p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>在网上搜集资料后，发现使用apache中的common-io包是比较方便的。common-io 2.0以后出的新工具类FileAlteration，其中带listener、observer、monitor。我使用了三个类分别为Watch(继承FileAterationListenerAdaptor)、Exec(使用Runtime.getRuntime().exec实现调用命令)、MainCmd(主函数入口)我这里直接贴代码，有空了再把详解或者注释补上。也可在<a href="https://github.com/Ryziii/HexoShell" target="_blank" rel="noopener">Github地址</a>查看最新代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainCmd类</span></span><br><span class="line"><span class="keyword">package</span> core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.monitor.FileAlterationMonitor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.monitor.FileAlterationObserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainCmd</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> DeployInterval = TimeUnit.MINUTES.toMillis(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> ObserverInterval = TimeUnit.SECONDS.toMillis(<span class="number">5</span>);</span><br><span class="line">        String rootDir = <span class="string">"/Users/ryziii/Hexo/"</span>;</span><br><span class="line">        Watch watch = <span class="keyword">new</span> Watch();</span><br><span class="line">        FileAlterationObserver observer = <span class="keyword">new</span> FileAlterationObserver(<span class="keyword">new</span> File(rootDir));</span><br><span class="line">        observer.addListener(watch);</span><br><span class="line">        FileAlterationMonitor monitor = <span class="keyword">new</span> FileAlterationMonitor(ObserverInterval,observer);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            monitor.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Exec类</span></span><br><span class="line"><span class="keyword">package</span> core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.LineNumberReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exec</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">start</span><span class="params">(String cmd)</span></span>&#123;</span><br><span class="line">        String[] cmdA = &#123;<span class="string">"zsh"</span>,<span class="string">"-c"</span>,cmd&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process process = Runtime.getRuntime().exec(cmdA);</span><br><span class="line">            <span class="keyword">if</span>(!cmd.equals(<span class="string">"cd ~/hexo\nhexo s"</span>)) &#123;</span><br><span class="line">                LineNumberReader br = <span class="keyword">new</span> LineNumberReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                String line;</span><br><span class="line">                <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//                System.out.println(line);</span></span><br><span class="line">                    sb.append(line).append(<span class="string">"\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (process != <span class="keyword">null</span>)</span><br><span class="line">                    process.destroy();</span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Watch类</span></span><br><span class="line"><span class="keyword">package</span> core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.monitor.FileAlterationListenerAdaptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Watch</span> <span class="keyword">extends</span> <span class="title">FileAlterationListenerAdaptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String hexodg = <span class="string">"cd ~/hexo\nhexo clean &amp;&amp; hexo d -g"</span>;</span><br><span class="line">    <span class="keyword">private</span> String hexos = <span class="string">"cd ~/hexo\nhexo s"</span>;</span><br><span class="line">    <span class="keyword">private</span> String ki = <span class="string">"lsof -i :4000|grep -v \"PID\"|grep \"node\"|awk '&#123;print \"kill -9\",$2&#125;'|sh"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> baseTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> curTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baseTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        <span class="keyword">this</span>.curTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileChange</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        curTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        <span class="keyword">long</span> dif = (curTime - baseTime);</span><br><span class="line">        System.out.printf(<span class="string">"%.0fs\n"</span>,dif*<span class="number">1.0</span>/<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dif &gt;= MainCmd.DeployInterval) &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            String str = <span class="keyword">new</span> Exec().start(ki).toString();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">            System.out.println(<span class="string">"##################################################################"</span>);</span><br><span class="line">            System.out.println(<span class="string">"#        File Change more than 10min....Starting Hexo work       #"</span>);</span><br><span class="line">            System.out.println(<span class="string">"##################################################################"</span>);</span><br><span class="line">            baseTime = curTime;</span><br><span class="line">            String str1 = <span class="keyword">new</span> Exec().start(hexodg).toString();</span><br><span class="line">            System.out.println(str1);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="keyword">false</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"##################################################################"</span>);</span><br><span class="line">                System.out.println(<span class="string">"#          未达10min，开启预览，请进入http://localhost:4000      #"</span>);</span><br><span class="line">                System.out.println(<span class="string">"##################################################################"</span>);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">new</span> Exec().start(hexos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring学习-AOP专题</title>
      <link href="/post/447299e3.html"/>
      <url>/post/447299e3.html</url>
      
        <content type="html"><![CDATA[<h2 id="AOP是什么"><a href="#AOP是什么" class="headerlink" title="AOP是什么"></a>AOP是什么</h2><ul><li>AOP：面向切面变成，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术,简而言之就是拦截器</li><li>主要功能：日志记录、性能统计、安全控制、事务处理、异常处理</li></ul><p>在 Spring AOP 中，有 3 个常用的概念，Advices 、 Pointcut 、 Advisor ，解释如下：</p><p>Advices ：表示一个 method 执行前或执行后的动作。<br>Pointcut ：表示根据 method 的名字或者正则表达式去拦截一个 method 。<br>Advisor ： Advice 和 Pointcut 组成的独立的单元，并且能够传给 proxy factory 对象。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring学习-Bean装配专题</title>
      <link href="/post/23f4f4f6.html"/>
      <url>/post/23f4f4f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Bean配置项"><a href="#Bean配置项" class="headerlink" title="Bean配置项"></a>Bean配置项</h2><ul><li>Id：唯一标识</li><li>Class：具体要实现的那个类</li><li>Scope：作用域</li><li>Constructor arguments：构造器参数</li><li>Properties：属性</li><li>Autowiring mode：自动装配模式</li><li>lazy-initialization mod：懒加载模式</li><li>Initialization/destruction method：初始化和销毁方法</li></ul><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><ul><li>singleton：单例，指一个Bean容器中只在一份</li><li>prototype：每次请求(每次使用)创建新的实例，destroy不生效</li><li>request：每次http请求创建一个实例仅在当前request内有效</li><li>session：同上，每次http请求创建，当前session有效</li><li>global session：基于portlet的web中有效（portlet定义了global session），如果在web中，同session</li></ul><h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><ol><li>初始化，Bean的初始化有两种方法<ol><li>配置xml文件中的init-method</li><li>实现org.springframework.beans.factory.InitializingBean接口，并覆盖afterPropertiesSet方法</li></ol></li><li>销毁<ol><li>配置xml中的destory-method</li><li>实现org.springframework.beans.factory.DisposableBean接口，覆盖desroty方法</li></ol></li><li>全局默认初始化、销毁方法<ol><li>在xml文件中在beans里添加<code>default-init-method=&quot;init&quot; default-destory-method=&quot;destory&quot;</code> </li><li>当使用接口或配置xml进行初始化和销毁时，全局默认方法失效</li></ol></li></ol><p>覆盖接口方法先于xml配置文件调用</p><h2 id="Aware是什么"><a href="#Aware是什么" class="headerlink" title="Aware是什么"></a>Aware是什么</h2><p>Spring中提供了一些以Aware为结尾的接口，实现了Aware接口的beean在呗初始化之后，可以获取相应的资源，即对Spring相应资源的操作。 </p><h2 id="Bean自动装配-Autowiring"><a href="#Bean自动装配-Autowiring" class="headerlink" title="Bean自动装配(Autowiring)"></a>Bean自动装配(Autowiring)</h2><p>有byType、byName和construct(byType和construct寻找的是类型，和bean id没有关系)三种方法在xml中配置</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p>针对于资源文件的统一接口</p><ul><li>UrlResource：URL对应的资源，根据一个URL地址即可构建</li><li>ClassPathResource：获取类路径下的资源文件</li><li>FileSystemResource：获取文件系统里面的资源</li><li>ServletContextResource：ServletContext封装的资源，用于访问ServletContext环境下的资源</li><li>InputStreamResource：针对于输入流封装的资源</li><li>ByteArrayResource：针对于字节数组封装的资源</li><li>ResourceLoader<br>  <img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fynfw7nlg7j31680gigoy.jpg" alt=""> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring学习-IOC专题</title>
      <link href="/post/a99cbda8.html"/>
      <url>/post/a99cbda8.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是接口？"><a href="#什么是接口？" class="headerlink" title="什么是接口？"></a>什么是接口？</h2><ul><li>用于沟通的中介物的抽象化</li><li>实体把自己提供给外界的一种抽象化说明，用以由内部操作分离出外部沟通方法，使其能被修改内部而不影响外界实体与其交互的方式</li><li>对应Java接口即声明，声明了哪些方法是对外公开提供的</li><li>再Java8中，接口可以拥有方法体</li></ul><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><ul><li>结构设计中，分清层次及调用关系，每层只向外（上层）提供一组功能接口，各层间仅仅依赖接口而非实现类</li><li>接口实现的变动不影响各层间的调用，这一点在公共服务中尤为重要</li><li>“面向接口编程”中的“接口”是用于隐藏具体实现和实现多态性的组建</li></ul><h2 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h2><ul><li>IOC：控制反转，即控制权的转移，应用程序的本身不负责依赖对戏那个的创建和维护，而是外部容器负责创建和维护</li><li>DI(依赖注入) 是一种实现方式</li><li>目的：创建对象并且组装对象之间的关系<br>Spring常用的注入方式：在spring-config.xml中<ol><li><code>&lt;property name = &quot;xxx&quot; value=&quot;xxx&quot;/&gt;</code></li><li><code>&lt;constructor-arg name = &quot;xxx&quot; value=&quot;xxx&quot;</code></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring学习</title>
      <link href="/post/ac1ae772.html"/>
      <url>/post/ac1ae772.html</url>
      
        <content type="html"><![CDATA[<h2 id="spring是什么"><a href="#spring是什么" class="headerlink" title="spring是什么"></a>spring是什么</h2><p>Spring是一个开源框架，为企业应用开发的复杂性而创建<br>Spring是一个轻量级的控制反转(IoC)和面向切面(AOD)的容器框架</p><ul><li>从大小和开销方面而言Spring都是轻量的</li><li>通过控制反转(IoC)的技术达到松耦合的目的</li><li>提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务进行内聚型开发</li><li>包含并管理应用对象的配置和生命周期，是容器</li><li>将简单的俎讲配置，组成复杂的应用，是个框架</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java过滤器&amp;&amp;监听器</title>
      <link href="/post/4e094881.html"/>
      <url>/post/4e094881.html</url>
      
        <content type="html"><![CDATA[<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器是对web资源的请求拦截，完成特殊操作，尤其是对请求的预处理。</p><ol><li><p>应用场景</p><ul><li>web资源权限访问控制</li><li>请求字符集编码处理(中文字符)</li><li>内容敏感字符词汇过滤</li><li>相应信息压缩处理 </li></ul></li><li><p>过滤器生命周期</p><ul><li>web应用程序启动时，web服务器创建filter的实例对象及初始化</li><li>当请求访问与过滤器关联的web资源时，过滤器拦截请求，完成指定功能</li><li>Filter对象创建后会驻留在内存，在web应用移除或服务器停止时才销毁</li><li>init-&gt;doFilter-&gt;destroy</li></ul></li><li><p>过滤器实现步骤</p><ul><li>编写Filter接口，实现doFilter方法</li><li>在web.xml文件中对filter类进行注册，并设置所拦截的资源</li></ul></li><li><p>过滤器链</p><ul><li>在一个web应用中，多个过滤器组合起来称之为一个过滤器链</li><li>过滤器的调用顺序取决于过滤器在web.xml</li><li>文件中的注册顺序(注册顺序决定的事过滤器预处理的调用顺序，响应后处理调用顺序是注册顺序的逆序  )</li></ul></li><li><p>filter-mapping子元素dispatcheer</p><ul><li>REQUEST(默认)</li><li>INCLUDE 需要在jsp中使用&lt;jsp:include page=”/xxx.jsp”/&gt;</li><li>FORWARD 使用forward转发</li><li>ERROR 错误，需要定义error-page</li></ul></li></ol><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>可参照<a href="https://blog.csdn.net/yerenyuan_pku/article/details/52475065" target="_blank" rel="noopener">这里</a></p><ol><li>按监听器对象分类：<ul><li>ServletContext context上下文监听</li><li>HttpSession   回话监听</li><li>ServletRequest 请求对象监听</li></ul></li><li>按监听事件分类<ul><li>域对象自身的创建和销毁事件监听器(以生命周期)<ol><li>ServletContext-&gt;ServletContextListener</li><li>HttpSession-&gt;HttpSessionListener</li><li>ServletRequest-&gt;ServletRequestListener</li></ol></li><li>域对象中属性的创建、替换和消除事件监听器<ol start="4"><li>ServletContext-&gt;ServletContextAttributeListener</li><li>HttpSession-&gt;HttpSessionAttributeListener</li><li>ServletRequest-&gt;ServletRequestAttributeListener</li></ol></li><li>绑定在session中的某个对象的状态事件监听器(HttpSessionBindingListener)<ol start="7"><li>valueBound(HttpSessionBindingEvent event)    当监听器对戏那个绑定至HTTP会话调用</li><li>valueUnbound(HttpSessionBindingEvent event)  当监听器对象从HTTP会话内修改、移除或会话销毁时调用</li></ol></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java ee学习过程中使用到的一些函数与技巧(持续更新)</title>
      <link href="/post/4b57d472.html"/>
      <url>/post/4b57d472.html</url>
      
        <content type="html"><![CDATA[<h3 id="servlet用到的基础函数与技巧"><a href="#servlet用到的基础函数与技巧" class="headerlink" title="servlet用到的基础函数与技巧"></a>servlet用到的基础函数与技巧</h3><p>servlet中获取传过来的url地址：request.getRequestUrl()<br>servlet中获取传过来的参数：request.getQueryString()</p><ul><li><p>servlet中的注解@WebFilter：<br>  此为filter注解，可以设置filtername，urlPattern，initParams(设置初始化值)<br>  例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">"xxxxFilter"</span>,urlPatterns=<span class="string">"/*"</span>,initParams=&#123;</span><br><span class="line">    <span class="meta">@WebInitParam</span>(name=<span class="string">"systemName"</span>,value=<span class="string">"aaaa"</span>,</span><br><span class="line">    <span class="meta">@WebInitParam</span>(name=<span class="string">"version"</span>,value<span class="string">"2.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="jsp中使用到的基础函数与技巧"><a href="#jsp中使用到的基础函数与技巧" class="headerlink" title="jsp中使用到的基础函数与技巧"></a>jsp中使用到的基础函数与技巧</h3><p>如何让js获取当前页面input的id值<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value = "xxx" naem = "xxx" id = "xxx" onclick = "show(this)"&gt;&lt;/input&gt;</span><br><span class="line">&lt;script type = <span class="string">"text/javascript"</span>&gt;</span><br><span class="line">function(o)&#123;</span><br><span class="line">    var id = o.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ajax基础</title>
      <link href="/post/463d6ec8.html"/>
      <url>/post/463d6ec8.html</url>
      
        <content type="html"><![CDATA[<h3 id="Ajax特点："><a href="#Ajax特点：" class="headerlink" title="Ajax特点："></a>Ajax特点：</h3><ul><li>Ajax可以通过在后台和服务器的少量数据交换，实现异步更新</li><li>传统的网页如果需要更新则需要重载整个页面</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql 必知必会</title>
      <link href="/post/73f3eb27.html"/>
      <url>/post/73f3eb27.html</url>
      
        <content type="html"><![CDATA[<h3 id="第四章-mysql检索-限定"><a href="#第四章-mysql检索-限定" class="headerlink" title="第四章-mysql检索 限定"></a>第四章-mysql检索 限定</h3><ul><li>SELECT：查询</li><li>DISTINCT：去重</li><li>LIMIT：限制查询条数。LIMIT 3 OFFSET 5（从第3行开始查询3个）</li><li>完全限定表名：<code>SELECT product.prod_name FROM crashcourse.products;</code>(从crashcourse数据库中查表名为product的列prod_name)</li></ul><h3 id="第五章-排序"><a href="#第五章-排序" class="headerlink" title="第五章-排序"></a>第五章-排序</h3><ol><li>ORDER BY：升序排列。<ul><li>使用方法：<code>SELECT prod_name FROM products ORDER BY prod_name;</code></li></ul></li><li>多个列排序：<ul><li><code>SELECT prod_id,prod_price,prid_name FROM products ORDER BY prod_price,prod_name;</code>(先按产品价格后按照产品名即当产品价格相同时进行产品名排序)</li></ul></li><li>制定升\降序（DESC关键词）排列<ul><li>降序排列：<code>SELECT prod_id FROM products ORDER BY prod_id DESC;</code></li><li>升降序共用排序：<code>SELECT prod_id,prod_name FROM products ORDER BY prod_id DESC , prod_name;</code>(先按照prod_id降序排列，后按照prod_name升序)</li><li>ORDER BY位置：如果使用ORDER BY时，必须要在FROM之后，如果使用LIMIT，必须在ORDER BY之后。</li></ul></li></ol><h3 id="第六、七章-过滤数据-where"><a href="#第六、七章-过滤数据-where" class="headerlink" title="第六、七章-过滤数据(where)"></a>第六、七章-过滤数据(where)</h3><ol><li>简单使用：<ul><li><code>SELECT prod_name,prod_price FROM products WHERE prod_price = 2.50;</code>(返回prod_proce = 2.50的数据)</li><li>where子句操作符<img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fyng26v3vuj310s0h40u1.jpg" width="90%" height="90%"></li><li>范围检查：<code>SELECT prod_name,prod_price FROM products WHERE prod_price BETWEEN 5 AND 10;</code></li><li>检查NULL：<code>SELECT prod_name,prod_price FROM products WHERE prod_price IS NULL</code></li></ul></li><li>组合WHERE子句：<ul><li>AND操作符(可以过滤多个条件)：<code>SELECT prod_id,prod_price,prod_name FROM products WHERE prod_id = 1003 AND prod_price &lt;= 10;</code></li><li>OR操作符：<code>SELECT prod_name,prod_price FROM products WHERE prod_id = 1002 OR prod_id = 1003</code>(返回prod_id为1002<strong>或者</strong>1003的列)</li><li>OR AND共用，使用括号：<code>SELECT prod_price,prod_name FROM products WHERE (prod_id = 1002 OR prod_id = 1003) AND prod_price &gt;= 10</code></li></ul></li><li>IN操作符：<ul><li>使用IN操作符和BETWEEN一样的功能：<code>SELECT prod_id FROM products IN (1002,1010);</code></li></ul></li><li>NOT操作符：取反</li></ol><h3 id="第八章-通配符过滤"><a href="#第八章-通配符过滤" class="headerlink" title="第八章-通配符过滤"></a>第八章-通配符过滤</h3><ol><li>LIKE操作符：使用LIKE说明指示mysql后的搜索模式利用通配符匹配而不是直接相等匹配</li><li>%通配符：表示匹配字符出现任意次数，有点像正则中的*<ul><li><code>SELECT prod_id,prod_name FROM products WHERE prod_name LIKE &#39;aaa%&#39;;</code>返回 aaa*</li></ul></li><li>_通配符：匹配单个字符</li><li>通配符速度很慢，很少使用，不应该放置在搜索模式的开始处。</li></ol><h3 id="第九章-使用正则"><a href="#第九章-使用正则" class="headerlink" title="第九章-使用正则"></a>第九章-使用正则</h3><ol><li>REGEXP：<ul><li><code>SELECT prod_name FROM products WHERE prod_name LIKE &#39;1000&#39; ORDER BY prod_name;</code></li><li><code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;1000&#39; ORDER BY prod_name;</code></li><li>上面两个一个使用LIKE一个使用REGEXP，使用LIKE的语句将不返回数据因为LIKE匹配的是整行，REGEXP匹配的是行内的值</li><li>REGEXP转义用 \</li><li>开始和结束符：^(开始)、$(结束)</li></ul></li></ol><h3 id="第十章-计算字段"><a href="#第十章-计算字段" class="headerlink" title="第十章-计算字段"></a>第十章-计算字段</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决hexo 需要部署到服务器上每次都需要输入密码</title>
      <link href="/post/4708f813.html"/>
      <url>/post/4708f813.html</url>
      
        <content type="html"><![CDATA[<p>  最近经常用hexo写总结经验和学习笔记，但是每次hexo clean &amp;&amp; hexo d -g的时候都需要输入密码。因为我不是部署到github page是部署到个人的服务器上（按照类似这两个教程<a href="https://segmentfault.com/a/1190000009363890" target="_blank" rel="noopener">教程1</a>、<a href="https://segmentfault.com/a/1190000010680022" target="_blank" rel="noopener">教程2</a>部署的），所以网上很多经验教程不适用。</p><p>  网上很多人说的方法如下，在_config.yml中设置deploy把http改成git，此方法不适用我。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　<span class="attr">deploy:</span></span><br><span class="line">　<span class="attr">type:git</span></span><br><span class="line">　<span class="attr">repository:git@xxx:xxx.git</span></span><br><span class="line">　<span class="attr">branch:master</span></span><br></pre></td></tr></table></figure><p>  我使用的是ssh免密登陆，一开始一直找不到问题在哪里，后来看到<a href="https://www.jianshu.com/p/59eeb1493a45" target="_blank" rel="noopener">这个帖子</a>终于发现问题。因为给服务器创建了一个git用户，所以需要切换用户到git然后设置ssh key，之前一直在root用户下设置的，巨坑。。。</p><p>  设置ssh key过程：</p><ol><li>在本地端生成ssh公钥<code>ssh-keygen</code></li><li>在服务器端切换至git用户<code>su git</code></li><li>在服务器端<code>vi ~/.ssh/authorized_keys</code>，将本地端生成的id_rsa.pub粘贴至此</li><li><code>ssh -T git@xxx</code>测试是否成功（无需输入密码则成功）</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EL表达式和JSTL</title>
      <link href="/post/3a9cff33.html"/>
      <url>/post/3a9cff33.html</url>
      
        <content type="html"><![CDATA[<ol><li><ul><li>EL表达式：Expression Language（表达式语言），目的是替代JSP页面中的复杂代码。</li></ul><ul><li><p>EL表达式语法：</p><p>   ${变量名}</p></li><li><p>当session和request作用域的变量名冲突了，可以使用el名称sessionScope.username和requestScope.username</p></li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fynfw4dbvuj30j607adge.jpg" alt=""></p><ul><li><p>当通过封装的类传输时可以使用三种方法(假定User类)</p><ol><li><p>${user.username}</p><p>${user.password}</p></li><li><p>${requestScope.user.username}</p><p>${requestScope.user.password}</p></li><li><p>${user[‘username’]}</p><p>${user[‘password’]}</p></li></ol></li></ul></li><li><p>JSTL</p><ul><li><p>JSTL：JSP标准标签库(JavaServerPages Standard Tag Library)</p></li><li><p>JSTL通常会和EL表达式合作实线JSP页面编码</p></li><li><p>使用JSTL需要在JSP中添加taglib指令:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MVC开发流程与文件上传笔记</title>
      <link href="/post/88f3c71a.html"/>
      <url>/post/88f3c71a.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fynfw1xotzj30j60a2754.jpg" alt=""></p><p>文件上传jsp要素</p><ol><li>form表单必须是post提交方式</li><li>表单必须有文件上传项，文件上传必须有name属性和值</li><li>表单的enctype属性必须设置为multipart/form-data</li></ol><p>文件上传种servlet中的操作</p><ol><li>创建一个工厂资盘文件项工厂对象</li><li>创建一个核心解析类</li><li>解析request请求，返回的是List集合，List集合中存放的事Fileitem对象</li><li>遍历集合，获得每个FileItem，判断表达项还是文件上传项目</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>servlet笔记、转发与重定向</title>
      <link href="/post/85ffea81.html"/>
      <url>/post/85ffea81.html</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>servlet是用来处理用户请求的小程序</p><p>response.setContentType(“text/html;charset=UTF-8”); 目的是为了控制浏览器的行为，即控制浏览器用UTF-8进行解码；</p><p>response.setCharacterEncoding(“UTF-8”);目的是用于response.getWriter()输出的字符流的乱码问题</p><ol><li>如果中文返回出现？？字符，这表明没有加response.setCharacterEncoding(“UTF-8”);</li><li>如果返回的中文是“烇湫”这种乱码，说明浏览器的解析问题，应该检查下是否忘加response.setHeader(“Content-type”, “text/html;charset=UTF-8”);</li></ol><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fynfvzqbxsj30j606wdgi.jpg" alt=""></p><p>service服务负责转发doget或dopost或doxxx方法，如果重写了service就需要添加上转发方法</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fynfw060zgj30j608mdgo.jpg" alt=""></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fynfw155mbj30j609gaaq.jpg" alt=""></p><p>servletContext表示整个javaweb工程</p><p>servletConfig表示某一个servlet中的配置文件  </p><h2 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h2><ul><li>转发(内部重定向)：request.getRequestDispatcher(“目标地址”).forward(request,response);</li><li>重定向：response.sendRedirect(“目标地址”);</li></ul><ol><li>重定向可以是任意url，转发只能在同一个web应用程序中的其他web组件</li><li>使用转发不会改变浏览器地址栏的url，转发前后url一样；重定向会改变浏览器url。</li><li>转发只请求一次服务器，重定向请求服务器两次。</li><li>转发保存数据，重定向不保存数据</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>xml和xpath</title>
      <link href="/post/888f9884.html"/>
      <url>/post/888f9884.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>xml允许使用实体引用表示特殊字符：<img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fyng50mrmjj30j605sgmb.jpg" alt=""><code>cdata:\&lt;![CDATA[文本内容]]\&gt;</code></p></li><li><p>xml解析方式</p><ul><li>DOM：Document Object Model：文档对象模型</li><li>SAX：Simple API for XML 行业闺房</li><li>JSXP：java API for XML：java解析xml文档的API</li></ul></li><li><p>xpath</p><p>xpath节点：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fyng4laplmj30j608i40a.jpg" alt=""></p><ol><li><p>xpath基本关系：</p><ul><li><p>基本值：没有父节点的子节点</p></li><li><p>项：一个项代表一个节点或基本值</p></li><li><p>序列：序列可以表示节点集(多个节点)或者项</p></li></ul></li><li><p>节点关系：</p><ul><li>父节点</li><li>子节点</li><li>兄弟节点</li><li>祖先节点</li><li>后代节点</li></ul></li><li><p>xpath相对路径绝对路径：xpath绝对路径以／开头，相对路径不以／开头</p><ul><li>/list/demo/xxx绝对路径</li><li>list/demo/xxx相对路径</li></ul></li><li><p>xpath基础语法：xpath使用路径表达式定位xml文档中的节点和节点集</p></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jsp内置对象</title>
      <link href="/post/ba1c11f7.html"/>
      <url>/post/ba1c11f7.html</url>
      
        <content type="html"><![CDATA[<ol><li><strong>request：</strong><ul><li>封装了由web浏览器和其他客户的生成的HTTP请求的细节(参数，属性，头标和数据)</li><li>作用域：用户的请求周期</li><li>作用域：可以在相邻两个web资源之间共享一个，使用：setAttribute和getAttribute</li><li>请求转发(跳转)：getRequestDispatcher.forward(request,response);</li></ul></li><li><strong>out：</strong>输出流对象</li><li><strong>response：</strong>封装了返回到HTTP客户端的输出，给页面作者提供设置响应头标和状态码的方式</li><li><strong>pageContext：</strong><ul><li>请求转发：pageContext.forward</li><li>include方法</li><li>pageContext可以获取其他的内置对象。getRequest、getResponse </li><li>作用域：当前页面</li></ul></li><li><strong>session：</strong><ul><li>作用域：会话期间</li><li>有效周期：session.setMaxInactiveInterval(int second)</li></ul></li><li><p><strong>error：</strong></p><ul><li>exception对象只能在错误页面中使用</li><li>有一个页面出现了错误页面进入指定错误处理页面，在&lt;%@page中使用errorPage指定error.jsp</li></ul></li><li><strong>application：</strong><ul><li>提供关于服务器版本，应用级初始化参数和应用内资源绝对路径方式</li><li>作用域：web容器生命周期</li><li>可用于访问量</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>idea和eclipse javaweb打开tomcat404解决办法</title>
      <link href="/post/df331d5c.html"/>
      <url>/post/df331d5c.html</url>
      
        <content type="html"><![CDATA[<p>使用idea打开eclipse创建的javaweb项目运行tomcat会出现404</p><p>使用eclipse404可以在servers中双击打开tomcat更改Server Location选择第二个选项。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>core java笔记(第六章-接口、lambda表达式与内部类)</title>
      <link href="/post/f7db9a31.html"/>
      <url>/post/f7db9a31.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《腾讯传》读后感</title>
      <link href="/post/e52bdd84.html"/>
      <url>/post/e52bdd84.html</url>
      
        <content type="html"><![CDATA[<p>​    书本开头几章揭露的那个时代的互联网是我之前没有听说过的，站长是有雄厚的财力才能做成的，马化腾自费购买设备，丁磊利用国企之便，雷军也是玩站的人。都是技术出身的大佬，我没想到他们都是同时代的年轻人。</p><p>​    马化腾的出身与智力水平都不错，因为那个敏感年月对父母来说上大学成了一个有点儿危及到生命的事情，所以很多家长希望把儿女就在身边念书，马化腾那一批学生就成了深大建校资质最好的一批学生了，有些人甚至可以上北大清华。他与他后来的合伙人是从高中就认识到大学还同宿舍的好基友，有个感触就是这帮人都是『富家子弟』，家里不缺钱也不缺人脉，而且人还勤奋，不然腾讯建立之初也活不下去。</p><p>​    马化腾刚毕业的时候进了一个软件公司卖软件，当时那个软件公司如日中天，马化腾写了个软件卖了钱以后创业想做bb机的生意，后来开始了移动设备革命，bb机被取代了，马化腾团队开始接活也就是所谓外包来给公司续命，中间看到icq卖了个高价于是模仿着做，这时马化腾作为一个产品人的睿智就体现出来了。当时国内已经有很多做类似社交工具的了，马化腾解决了人痛点而后产品非常火，但是当时没人能让这玩意儿盈利于是马化腾卖不出去，成为第二个icq是不可能的了，这时候历史的巧合就出现了，腾讯在借了各种钱就快活不下去的时候找来了投资，正赶上美国互联网泡沫前夕。</p><p>​    说实在的一个人能不能牛逼取决于太多东西了，有必然性也有偶然性。家庭，成长过程中的物质条件，捕捉到的东西，这些都是先天的，从襁褓到成年这些东西都是没法选的吧，所以说命。从马化腾公司前期能生存下来属于后天因素，赶在互联网泡沫前夕拿到投资，有极强的偶然性。所以我觉得中国如果没有腾讯也不一定有『x迅』 『腾x』，腾讯的活下来有极强的偶然性。</p><p>​    腾讯拿到钱以后也在找盈利模式，当时移动搞了移动梦网也就是sp业务在美国互联网泡沫后救活一大票中国互联网公司，当时在美国上市的三大门户网站股价全部跌成几毛钱。之后就是腾讯做产品牛逼之处了，模范韩国做出qq秀，在micro blog时代做出从未有过的qq空间，qq秀这个产品在qq庞大的用户基数上瞬间变现，那时候还没有流量变现一说，单纯模仿美国互联网肯定不可能做出qq秀，欧美人无论如何也理解不了亚洲人愿意为这东西付费，日本韩国的偶像产业已经玩的出神入化，在物质消费不那么丰富的那个年代也许腾讯就是引导中国人为虚拟产品付费的领头羊吧。</p><p>​    再说移动互联网，谈腾讯的移动互联网就不得不提微信，谈微信就不得不提张小龙。出名要趁早，张小龙也是一个天才，在门户时代还未来那帮人在互联网行业探寻的时候，张小龙做出了一个全球都知名的邮件客户端产品foxmail，张小龙在很长一段时间都自己在维护这个项目，且我认为有点理想主义地把产品注入很多自己的思考和特色，有点文艺风格的感觉。后来在售卖foxmail的时候曾被一家大的报纸发文唱衰，因为张小龙不想在邮件客户端上投放广告，所以变现存在问题，可是在媒体发文不过两个月后foxmail就以高价售出。后来腾讯为了打造自己的邮箱品牌便收购了曾经收购foxmail的公司，张小龙坚持在广州办公把qq邮箱也搞的风生水起。后来的微信是张小龙通过一个早期的移动社交软件窥探出市场，也想试试做一个这样的产品，当时腾讯内部有几个团队都在做，就张小龙的团队做成了，真的一个人做产品能不能做的好，不是看资源丰不丰富人手够不够多，还是看做产品能不能抓住核心要素和用户痛点。</p><p>​    在PC时代和移动互联网时代腾讯都牢牢抓住后来从业者才懂得用户数和数据量，无数人对腾讯发起猛攻都无法取而代之，社交之王我认为还是腾讯，有了用户数直接在移动支付分一杯羹也是轻而易举的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>core java笔记(第五章-继承)</title>
      <link href="/post/dd734bac.html"/>
      <url>/post/dd734bac.html</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>超类与子类：</strong></p><ul><li><p><strong>super:</strong></p><p>super与this不同，super只是一个指示关键字，并不是一个对象的引用，所以不可以将super赋值给另一个对象变量。</p></li><li><p>子类可以增加域、增加方法、覆盖超类的方法，但是<strong>不能删除继承的任何域和方法。</strong></p></li><li><p>如果字累的构造器没有显式地调用超类的构造器，则将自动调用超类默认构造器(没有参数)。如果超类没有不带参数的构造器，并且在子类的构造器中又没有显式的调用超类的其他构造器，则Java编译器将报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name,<span class="keyword">double</span> salary,<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name,salary,year,month,day);</span><br><span class="line">    bonus = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>多态：</strong></p><ul><li><p>定义：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）</p></li><li><p>多态存在的三个必要条件：</p><ol><li>要有继承</li><li>要有重写</li><li>父类引用指向子类对象</li></ol></li><li><p>在java中，多态大致可以分为以下几种情况：</p><ol><li>person为父类，student为子类。那么：person p=new student()；</li><li>fliable为接口，bird为实现接口的类，那么：fliable f=new bird()；</li><li>fliable为抽象类，bird为继承fliable的类，那么：fliable f=new bird()；</li></ol></li><li><p>我的理解：使用多个父类引用多个不同子类对象，不同子类对象的引用可以实现不同子类的方法；</p><ul><li>多态时使用的成员变量如果冲突，使用的是父类的变量</li><li>多态时使用的成员方法如果子类和父类冲突，使用子类的方法</li><li>如果已经向上转型后需要调用子类特有的方法需要向下转型</li></ul></li><li><p><a href="https://blog.csdn.net/lingang1991/article/details/69905944" target="_blank" rel="noopener">网上比较通俗易懂的参考资料</a></p></li></ul></li><li><p><strong>抽象：</strong></p><ul><li><p>抽象的意义在于把设计和方法的实现分开,抽象类定义了一个方法,但要通过子类来实现他的方法</p></li><li><p>特点:</p><ol><li><p>有抽象方法的类一定是抽象类</p></li><li><p>抽象类只能用来被继承,不能实例化只能通过子类来实现</p></li><li><p>抽象类可以有其它的方法  不一定只有抽象方法</p></li><li><p>如果子类只覆盖了部分抽象方法，那么该子类还是一个抽象类</p></li><li><p>抽象方法和抽象类都必须被abstract关键字修饰</p></li></ol></li><li>我的理解：<strong>预留</strong>；抽象类就是用来被子类继承实现的，可以说是保留方法和属性，只声明不实现，因为必须要在子类里实例化，所以基本上无需在抽象类中实现具体的。如果子类也不知道该不该完成这个方法，就可以继续抽象这个方法，等下一个子类来完成。</li></ul></li><li><p><strong>equal:</strong></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fynfvysa0tj311r0u0tk7.jpg" alt="from core java"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> core java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>core java笔记(第四章-对象与类)</title>
      <link href="/post/807b4761.html"/>
      <url>/post/807b4761.html</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>方法重载:</strong></p><ul><li>概述:在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</li><li>特点:与返回值类型无关，只看方法名和参数列表<br>在调用时，虚拟机通过参数列表的不同来区分同名方法”</li></ul></li><li><p><strong>java数组长度：</strong></p><p>​    java数组长度可以为0，0时非null。如果数组为null如果对数组进行操作会报NullPointException，在以数组返回的方法中如果返回没有值则一般返回长度为0的数组这样对方法调用者对其作处理比较方便。</p></li><li><p><strong>对象变量与对象：</strong></p><p>对象变量知识对对象的一个引用，不能调用对象的方法，如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date deadline;</span><br><span class="line">deadline.toString();<span class="comment">//错误</span></span><br><span class="line">deadline = <span class="keyword">new</span> Date();</span><br><span class="line">deadline.toString();<span class="comment">//正确</span></span><br></pre></td></tr></table></figure></li><li><p><strong>返回可变对象：</strong></p><p> getter返回对象如果是可变对象类型因为返回对象的克隆，否则破坏封装型。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hireDay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Employee harry=...;</span><br><span class="line">Date d = harry.getHireDay();</span><br><span class="line">d.setTime(.....);</span><br><span class="line"><span class="comment">//此时可以更改封装类中的数据hireday</span></span><br><span class="line"><span class="comment">//getHireDay更改为如下形式即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Date)hireDay.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>final:</strong></p><p> 一般修饰不可变类型，如String而非StringBuilder。如果修饰可变类就会发生混乱。</p></li><li><p><strong>static 静态：</strong></p><p>  static不依赖对象，可以在没创建对象的情况下通过类名调用(方法／对象)。</p><ol><li><p>静态方法：</p><ul><li><p>一个方法不需要访问对象状态所有参数都是显式参数提供的（Math.pow)</p></li><li><p>一个方法只需要访问类的静态域(Employee.getNextId)</p></li></ul></li><li><p>静态变量：被所有对象拥有，只有一个副本</p></li><li><p>静态代码块：可用于优化性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对比两个代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Date birthDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isBornBoomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Date startDate = Date.valueOf(<span class="string">"1946"</span>);</span><br><span class="line">        Date endDate = Date.valueOf(<span class="string">"1964"</span>);</span><br><span class="line">        <span class="keyword">return</span> birthDate.compareTo(startDate)&gt;=<span class="number">0</span> &amp;&amp; birthDate.compareTo(endDate) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上个代码每次调用isBornBoomer时会生成startDate和endDate对象 造成资源浪费，使用下个代码则只在类初始化时调用一次</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Date startDate,endDate;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        startDate = Date.valueOf(<span class="string">"1946"</span>);</span><br><span class="line">        endDate = Date.valueOf(<span class="string">"1964"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Date birthDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isBornBoomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthDate.compareTo(startDate)&gt;=<span class="number">0</span> &amp;&amp; birthDate.compareTo(endDate) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>java swap：</strong></p><p>java方法中式对对象值的传递，也就是c中的形参，不是实参。所以swap后不会改变原来对象的值，如果更改的是对象的属性则可以改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个方法不会改变传入的原对象的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">swapObject</span><span class="params">(Test a,Test b)</span></span>&#123;</span><br><span class="line"> Test c;</span><br><span class="line"> c = b;</span><br><span class="line"> b = a;</span><br><span class="line"> a = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此方法可以改变对象的属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">swapObjectProperty</span><span class="params">(Test a ,Test b )</span></span>&#123;</span><br><span class="line"> Test c;</span><br><span class="line"> c.num = b.num;</span><br><span class="line"> b.num = a.num;</span><br><span class="line"> a.num = c.num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>构造器：</strong></p><p>当类为提供构造器时才会由系统提供一个默认构造器(将所有属性初始化)，如果写了一个构造器，则无默认构造器</p><p>构造器中使用this(…)是指使用构同一个类中的另一个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">"aaa"</span>,<span class="number">3.33</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个this()指的就是调用同个类下的另一个构造器Employee(String,double)</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> core java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HF jsp 第三章</title>
      <link href="/post/6bb10f0c.html"/>
      <url>/post/6bb10f0c.html</url>
      
        <content type="html"><![CDATA[<ol><li>在”servlet把请求转发给jsp“和“jsp从请求对象得到问答”的过程中，需要注意在servlet中的setAttribute和jsp中的getAttribute两个的变量需要一样。coding过程中在set的时候写的是sytles在get中写的是style，寻了会儿bug。</li><li>Parameter和Attribute<ul><li>Parameter没有setParameter，Attribute有。</li><li>一般的在两个Web组建为链接关系时使用getParameter()方法获得请求参数(从表单获取时使用)</li><li>两个Web组建为转发关系时使用getAttribute()来获取转发源组建共享request范围内的数据(常用语servlet传数据到jsp，用在request的属性)</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HF jsp 第二章</title>
      <link href="/post/26afac5e.html"/>
      <url>/post/26afac5e.html</url>
      
        <content type="html"><![CDATA[<ol><li>为什么MVC三端分离了又要使用统一的控制器管理多个MODEL和VIEW，MODEL负责不同的业务逻辑（如购物车的状态），VIEW是视图</li><li>容器为web应用提供了通信支持，生命周期管理、多线程支持、生命方式安全、以及jsp支持，这样就可以分离不同功能，全身心投入业务逻辑的开发</li><li>容器创建一个相应对象和请求对象，servlet可以用这些对象得到相关的请求信息，并传信息给客户</li><li>HTTP响应<img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fynfw58nkcj30j60f876h.jpg" alt="image-20180830224958085"></li><li>CGI模式的动态web<img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fynfw674oxj30j60kljto.jpg" alt="image-20180830224806221"></li><li>典型的servlet是拓展了一个HttpServletRequest类并覆盖了一个或者多个服务方法（doPost()   doGet()），分别对应于浏览器调用的HTTP方法</li><li>可以使用servlet mapping映射serlvet类到url来完成请求servlet，部署名和可以和实际的类名完全不同</li><li><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fynfw6mxt5j30j60arad7.jpg" alt="image-20180903235415834"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
